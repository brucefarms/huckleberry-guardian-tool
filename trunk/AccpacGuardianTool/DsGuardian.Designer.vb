'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4952
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsGuardian"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsGuardian
    Inherits Global.System.Data.DataSet
    
    Private tableAPTransExport1 As APTransExport1DataTable
    
    Private tableAPTransExport2 As APTransExport2DataTable
    
    Private tableGlTransExport As GlTransExportDataTable
    
    Private tableJournal_Headers As Journal_HeadersDataTable
    
    Private tableJournal_Details As Journal_DetailsDataTable
    
    Private tableInvoice_Header As Invoice_HeaderDataTable
    
    Private tableInvoice_Details As Invoice_DetailsDataTable
    
    Private tableInvoice_Payment_Schedules_ As Invoice_Payment_Schedules_DataTable
    
    Private _tableAccount_txt As _Account_txtDataTable
    
    Private _tableSupplier_txt As _Supplier_txtDataTable
    
    Private tableAP0015 As AP0015DataTable
    
    Private tableTermsMatching As TermsMatchingDataTable
    
    Private relationAPTransExport1_APTransExport2 As Global.System.Data.DataRelation
    
    Private relationJournal_Headers_Journal_Details As Global.System.Data.DataRelation
    
    Private relationInvoice_Header_Invoice_Details As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("APTransExport1")) Is Nothing) Then
                MyBase.Tables.Add(New APTransExport1DataTable(ds.Tables("APTransExport1")))
            End If
            If (Not (ds.Tables("APTransExport2")) Is Nothing) Then
                MyBase.Tables.Add(New APTransExport2DataTable(ds.Tables("APTransExport2")))
            End If
            If (Not (ds.Tables("GlTransExport")) Is Nothing) Then
                MyBase.Tables.Add(New GlTransExportDataTable(ds.Tables("GlTransExport")))
            End If
            If (Not (ds.Tables("Journal_Headers")) Is Nothing) Then
                MyBase.Tables.Add(New Journal_HeadersDataTable(ds.Tables("Journal_Headers")))
            End If
            If (Not (ds.Tables("Journal_Details")) Is Nothing) Then
                MyBase.Tables.Add(New Journal_DetailsDataTable(ds.Tables("Journal_Details")))
            End If
            If (Not (ds.Tables("Invoice_Header")) Is Nothing) Then
                MyBase.Tables.Add(New Invoice_HeaderDataTable(ds.Tables("Invoice_Header")))
            End If
            If (Not (ds.Tables("Invoice_Details")) Is Nothing) Then
                MyBase.Tables.Add(New Invoice_DetailsDataTable(ds.Tables("Invoice_Details")))
            End If
            If (Not (ds.Tables("Invoice_Payment_Schedules ")) Is Nothing) Then
                MyBase.Tables.Add(New Invoice_Payment_Schedules_DataTable(ds.Tables("Invoice_Payment_Schedules ")))
            End If
            If (Not (ds.Tables("Account.txt")) Is Nothing) Then
                MyBase.Tables.Add(New _Account_txtDataTable(ds.Tables("Account.txt")))
            End If
            If (Not (ds.Tables("Supplier.txt")) Is Nothing) Then
                MyBase.Tables.Add(New _Supplier_txtDataTable(ds.Tables("Supplier.txt")))
            End If
            If (Not (ds.Tables("AP0015")) Is Nothing) Then
                MyBase.Tables.Add(New AP0015DataTable(ds.Tables("AP0015")))
            End If
            If (Not (ds.Tables("TermsMatching")) Is Nothing) Then
                MyBase.Tables.Add(New TermsMatchingDataTable(ds.Tables("TermsMatching")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property APTransExport1() As APTransExport1DataTable
        Get
            Return Me.tableAPTransExport1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property APTransExport2() As APTransExport2DataTable
        Get
            Return Me.tableAPTransExport2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GlTransExport() As GlTransExportDataTable
        Get
            Return Me.tableGlTransExport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Journal_Headers() As Journal_HeadersDataTable
        Get
            Return Me.tableJournal_Headers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Journal_Details() As Journal_DetailsDataTable
        Get
            Return Me.tableJournal_Details
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Invoice_Header() As Invoice_HeaderDataTable
        Get
            Return Me.tableInvoice_Header
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Invoice_Details() As Invoice_DetailsDataTable
        Get
            Return Me.tableInvoice_Details
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Invoice_Payment_Schedules_() As Invoice_Payment_Schedules_DataTable
        Get
            Return Me.tableInvoice_Payment_Schedules_
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _Account_txt() As _Account_txtDataTable
        Get
            Return Me._tableAccount_txt
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _Supplier_txt() As _Supplier_txtDataTable
        Get
            Return Me._tableSupplier_txt
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AP0015() As AP0015DataTable
        Get
            Return Me.tableAP0015
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TermsMatching() As TermsMatchingDataTable
        Get
            Return Me.tableTermsMatching
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsGuardian = CType(MyBase.Clone,dsGuardian)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("APTransExport1")) Is Nothing) Then
                MyBase.Tables.Add(New APTransExport1DataTable(ds.Tables("APTransExport1")))
            End If
            If (Not (ds.Tables("APTransExport2")) Is Nothing) Then
                MyBase.Tables.Add(New APTransExport2DataTable(ds.Tables("APTransExport2")))
            End If
            If (Not (ds.Tables("GlTransExport")) Is Nothing) Then
                MyBase.Tables.Add(New GlTransExportDataTable(ds.Tables("GlTransExport")))
            End If
            If (Not (ds.Tables("Journal_Headers")) Is Nothing) Then
                MyBase.Tables.Add(New Journal_HeadersDataTable(ds.Tables("Journal_Headers")))
            End If
            If (Not (ds.Tables("Journal_Details")) Is Nothing) Then
                MyBase.Tables.Add(New Journal_DetailsDataTable(ds.Tables("Journal_Details")))
            End If
            If (Not (ds.Tables("Invoice_Header")) Is Nothing) Then
                MyBase.Tables.Add(New Invoice_HeaderDataTable(ds.Tables("Invoice_Header")))
            End If
            If (Not (ds.Tables("Invoice_Details")) Is Nothing) Then
                MyBase.Tables.Add(New Invoice_DetailsDataTable(ds.Tables("Invoice_Details")))
            End If
            If (Not (ds.Tables("Invoice_Payment_Schedules ")) Is Nothing) Then
                MyBase.Tables.Add(New Invoice_Payment_Schedules_DataTable(ds.Tables("Invoice_Payment_Schedules ")))
            End If
            If (Not (ds.Tables("Account.txt")) Is Nothing) Then
                MyBase.Tables.Add(New _Account_txtDataTable(ds.Tables("Account.txt")))
            End If
            If (Not (ds.Tables("Supplier.txt")) Is Nothing) Then
                MyBase.Tables.Add(New _Supplier_txtDataTable(ds.Tables("Supplier.txt")))
            End If
            If (Not (ds.Tables("AP0015")) Is Nothing) Then
                MyBase.Tables.Add(New AP0015DataTable(ds.Tables("AP0015")))
            End If
            If (Not (ds.Tables("TermsMatching")) Is Nothing) Then
                MyBase.Tables.Add(New TermsMatchingDataTable(ds.Tables("TermsMatching")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAPTransExport1 = CType(MyBase.Tables("APTransExport1"),APTransExport1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableAPTransExport1) Is Nothing) Then
                Me.tableAPTransExport1.InitVars
            End If
        End If
        Me.tableAPTransExport2 = CType(MyBase.Tables("APTransExport2"),APTransExport2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableAPTransExport2) Is Nothing) Then
                Me.tableAPTransExport2.InitVars
            End If
        End If
        Me.tableGlTransExport = CType(MyBase.Tables("GlTransExport"),GlTransExportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGlTransExport) Is Nothing) Then
                Me.tableGlTransExport.InitVars
            End If
        End If
        Me.tableJournal_Headers = CType(MyBase.Tables("Journal_Headers"),Journal_HeadersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableJournal_Headers) Is Nothing) Then
                Me.tableJournal_Headers.InitVars
            End If
        End If
        Me.tableJournal_Details = CType(MyBase.Tables("Journal_Details"),Journal_DetailsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableJournal_Details) Is Nothing) Then
                Me.tableJournal_Details.InitVars
            End If
        End If
        Me.tableInvoice_Header = CType(MyBase.Tables("Invoice_Header"),Invoice_HeaderDataTable)
        If (initTable = true) Then
            If (Not (Me.tableInvoice_Header) Is Nothing) Then
                Me.tableInvoice_Header.InitVars
            End If
        End If
        Me.tableInvoice_Details = CType(MyBase.Tables("Invoice_Details"),Invoice_DetailsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableInvoice_Details) Is Nothing) Then
                Me.tableInvoice_Details.InitVars
            End If
        End If
        Me.tableInvoice_Payment_Schedules_ = CType(MyBase.Tables("Invoice_Payment_Schedules "),Invoice_Payment_Schedules_DataTable)
        If (initTable = true) Then
            If (Not (Me.tableInvoice_Payment_Schedules_) Is Nothing) Then
                Me.tableInvoice_Payment_Schedules_.InitVars
            End If
        End If
        Me._tableAccount_txt = CType(MyBase.Tables("Account.txt"),_Account_txtDataTable)
        If (initTable = true) Then
            If (Not (Me._tableAccount_txt) Is Nothing) Then
                Me._tableAccount_txt.InitVars
            End If
        End If
        Me._tableSupplier_txt = CType(MyBase.Tables("Supplier.txt"),_Supplier_txtDataTable)
        If (initTable = true) Then
            If (Not (Me._tableSupplier_txt) Is Nothing) Then
                Me._tableSupplier_txt.InitVars
            End If
        End If
        Me.tableAP0015 = CType(MyBase.Tables("AP0015"),AP0015DataTable)
        If (initTable = true) Then
            If (Not (Me.tableAP0015) Is Nothing) Then
                Me.tableAP0015.InitVars
            End If
        End If
        Me.tableTermsMatching = CType(MyBase.Tables("TermsMatching"),TermsMatchingDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTermsMatching) Is Nothing) Then
                Me.tableTermsMatching.InitVars
            End If
        End If
        Me.relationAPTransExport1_APTransExport2 = Me.Relations("APTransExport1_APTransExport2")
        Me.relationJournal_Headers_Journal_Details = Me.Relations("Journal_Headers_Journal_Details")
        Me.relationInvoice_Header_Invoice_Details = Me.Relations("Invoice_Header_Invoice_Details")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsGuardian"
        Me.Prefix = ""
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableAPTransExport1 = New APTransExport1DataTable
        MyBase.Tables.Add(Me.tableAPTransExport1)
        Me.tableAPTransExport2 = New APTransExport2DataTable
        MyBase.Tables.Add(Me.tableAPTransExport2)
        Me.tableGlTransExport = New GlTransExportDataTable
        MyBase.Tables.Add(Me.tableGlTransExport)
        Me.tableJournal_Headers = New Journal_HeadersDataTable
        MyBase.Tables.Add(Me.tableJournal_Headers)
        Me.tableJournal_Details = New Journal_DetailsDataTable
        MyBase.Tables.Add(Me.tableJournal_Details)
        Me.tableInvoice_Header = New Invoice_HeaderDataTable
        MyBase.Tables.Add(Me.tableInvoice_Header)
        Me.tableInvoice_Details = New Invoice_DetailsDataTable
        MyBase.Tables.Add(Me.tableInvoice_Details)
        Me.tableInvoice_Payment_Schedules_ = New Invoice_Payment_Schedules_DataTable
        MyBase.Tables.Add(Me.tableInvoice_Payment_Schedules_)
        Me._tableAccount_txt = New _Account_txtDataTable
        MyBase.Tables.Add(Me._tableAccount_txt)
        Me._tableSupplier_txt = New _Supplier_txtDataTable
        MyBase.Tables.Add(Me._tableSupplier_txt)
        Me.tableAP0015 = New AP0015DataTable
        MyBase.Tables.Add(Me.tableAP0015)
        Me.tableTermsMatching = New TermsMatchingDataTable
        MyBase.Tables.Add(Me.tableTermsMatching)
        Me.relationAPTransExport1_APTransExport2 = New Global.System.Data.DataRelation("APTransExport1_APTransExport2", New Global.System.Data.DataColumn() {Me.tableAPTransExport1.InvoiceNumberColumn}, New Global.System.Data.DataColumn() {Me.tableAPTransExport2.InvoiceNumberColumn}, false)
        Me.Relations.Add(Me.relationAPTransExport1_APTransExport2)
        Me.relationJournal_Headers_Journal_Details = New Global.System.Data.DataRelation("Journal_Headers_Journal_Details", New Global.System.Data.DataColumn() {Me.tableJournal_Headers.BATCHIDColumn, Me.tableJournal_Headers.BTCHENTRYColumn}, New Global.System.Data.DataColumn() {Me.tableJournal_Details.BATCHNBRColumn, Me.tableJournal_Details.JOURNALIDColumn}, false)
        Me.Relations.Add(Me.relationJournal_Headers_Journal_Details)
        Me.relationInvoice_Header_Invoice_Details = New Global.System.Data.DataRelation("Invoice_Header_Invoice_Details", New Global.System.Data.DataColumn() {Me.tableInvoice_Header.CNTBTCHColumn, Me.tableInvoice_Header.CNTITEMColumn}, New Global.System.Data.DataColumn() {Me.tableInvoice_Details.CNTBTCHColumn, Me.tableInvoice_Details.CNTITEMColumn}, false)
        Me.Relations.Add(Me.relationInvoice_Header_Invoice_Details)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAPTransExport1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAPTransExport2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGlTransExport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeJournal_Headers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeJournal_Details() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeInvoice_Header() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeInvoice_Details() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeInvoice_Payment_Schedules_() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_Account_txt() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_Supplier_txt() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAP0015() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTermsMatching() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsGuardian = New dsGuardian
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub APTransExport1RowChangeEventHandler(ByVal sender As Object, ByVal e As APTransExport1RowChangeEvent)
    
    Public Delegate Sub APTransExport2RowChangeEventHandler(ByVal sender As Object, ByVal e As APTransExport2RowChangeEvent)
    
    Public Delegate Sub GlTransExportRowChangeEventHandler(ByVal sender As Object, ByVal e As GlTransExportRowChangeEvent)
    
    Public Delegate Sub Journal_HeadersRowChangeEventHandler(ByVal sender As Object, ByVal e As Journal_HeadersRowChangeEvent)
    
    Public Delegate Sub Journal_DetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As Journal_DetailsRowChangeEvent)
    
    Public Delegate Sub Invoice_HeaderRowChangeEventHandler(ByVal sender As Object, ByVal e As Invoice_HeaderRowChangeEvent)
    
    Public Delegate Sub Invoice_DetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As Invoice_DetailsRowChangeEvent)
    
    Public Delegate Sub Invoice_Payment_Schedules_RowChangeEventHandler(ByVal sender As Object, ByVal e As Invoice_Payment_Schedules_RowChangeEvent)
    
    Public Delegate Sub _Account_txtRowChangeEventHandler(ByVal sender As Object, ByVal e As _Account_txtRowChangeEvent)
    
    Public Delegate Sub _Supplier_txtRowChangeEventHandler(ByVal sender As Object, ByVal e As _Supplier_txtRowChangeEvent)
    
    Public Delegate Sub AP0015RowChangeEventHandler(ByVal sender As Object, ByVal e As AP0015RowChangeEvent)
    
    Public Delegate Sub TermsMatchingRowChangeEventHandler(ByVal sender As Object, ByVal e As TermsMatchingRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class APTransExport1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnInvoiceNumber As Global.System.Data.DataColumn
        
        Private columnDocumentType As Global.System.Data.DataColumn
        
        Private columnDocDate As Global.System.Data.DataColumn
        
        Private columnBatchNumber As Global.System.Data.DataColumn
        
        Private columnVendorID As Global.System.Data.DataColumn
        
        Private columnTerms As Global.System.Data.DataColumn
        
        Private columnCurrencyID As Global.System.Data.DataColumn
        
        Private columnCurrRate As Global.System.Data.DataColumn
        
        Private columnPurchaseAmount As Global.System.Data.DataColumn
        
        Private columnFreightAmount As Global.System.Data.DataColumn
        
        Private columnMiscAmount As Global.System.Data.DataColumn
        
        Private columnTaxAmount As Global.System.Data.DataColumn
        
        Private columnPostDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "APTransExport1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocumentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocumentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BatchNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBatchNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendorIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendorID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TermsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTerms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrencyIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrencyID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurchaseAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurchaseAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FreightAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFreightAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiscAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiscAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PostDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPostDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As APTransExport1Row
            Get
                Return CType(Me.Rows(index),APTransExport1Row)
            End Get
        End Property
        
        Public Event APTransExport1RowChanging As APTransExport1RowChangeEventHandler
        
        Public Event APTransExport1RowChanged As APTransExport1RowChangeEventHandler
        
        Public Event APTransExport1RowDeleting As APTransExport1RowChangeEventHandler
        
        Public Event APTransExport1RowDeleted As APTransExport1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAPTransExport1Row(ByVal row As APTransExport1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAPTransExport1Row(ByVal InvoiceNumber As String, ByVal DocumentType As String, ByVal DocDate As String, ByVal BatchNumber As String, ByVal VendorID As String, ByVal Terms As String, ByVal CurrencyID As String, ByVal CurrRate As String, ByVal PurchaseAmount As String, ByVal FreightAmount As String, ByVal MiscAmount As String, ByVal TaxAmount As String, ByVal PostDate As String) As APTransExport1Row
            Dim rowAPTransExport1Row As APTransExport1Row = CType(Me.NewRow,APTransExport1Row)
            Dim columnValuesArray() As Object = New Object() {InvoiceNumber, DocumentType, DocDate, BatchNumber, VendorID, Terms, CurrencyID, CurrRate, PurchaseAmount, FreightAmount, MiscAmount, TaxAmount, PostDate}
            rowAPTransExport1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowAPTransExport1Row)
            Return rowAPTransExport1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByInvoiceNumber(ByVal InvoiceNumber As String) As APTransExport1Row
            Return CType(Me.Rows.Find(New Object() {InvoiceNumber}),APTransExport1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As APTransExport1DataTable = CType(MyBase.Clone,APTransExport1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New APTransExport1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnInvoiceNumber = MyBase.Columns("InvoiceNumber")
            Me.columnDocumentType = MyBase.Columns("DocumentType")
            Me.columnDocDate = MyBase.Columns("DocDate")
            Me.columnBatchNumber = MyBase.Columns("BatchNumber")
            Me.columnVendorID = MyBase.Columns("VendorID")
            Me.columnTerms = MyBase.Columns("Terms")
            Me.columnCurrencyID = MyBase.Columns("CurrencyID")
            Me.columnCurrRate = MyBase.Columns("CurrRate")
            Me.columnPurchaseAmount = MyBase.Columns("PurchaseAmount")
            Me.columnFreightAmount = MyBase.Columns("FreightAmount")
            Me.columnMiscAmount = MyBase.Columns("MiscAmount")
            Me.columnTaxAmount = MyBase.Columns("TaxAmount")
            Me.columnPostDate = MyBase.Columns("PostDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnInvoiceNumber = New Global.System.Data.DataColumn("InvoiceNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceNumber)
            Me.columnDocumentType = New Global.System.Data.DataColumn("DocumentType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocumentType)
            Me.columnDocDate = New Global.System.Data.DataColumn("DocDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocDate)
            Me.columnBatchNumber = New Global.System.Data.DataColumn("BatchNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBatchNumber)
            Me.columnVendorID = New Global.System.Data.DataColumn("VendorID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendorID)
            Me.columnTerms = New Global.System.Data.DataColumn("Terms", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTerms)
            Me.columnCurrencyID = New Global.System.Data.DataColumn("CurrencyID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrencyID)
            Me.columnCurrRate = New Global.System.Data.DataColumn("CurrRate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrRate)
            Me.columnPurchaseAmount = New Global.System.Data.DataColumn("PurchaseAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurchaseAmount)
            Me.columnFreightAmount = New Global.System.Data.DataColumn("FreightAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFreightAmount)
            Me.columnMiscAmount = New Global.System.Data.DataColumn("MiscAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiscAmount)
            Me.columnTaxAmount = New Global.System.Data.DataColumn("TaxAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxAmount)
            Me.columnPostDate = New Global.System.Data.DataColumn("PostDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPostDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnInvoiceNumber}, true))
            Me.columnInvoiceNumber.AllowDBNull = false
            Me.columnInvoiceNumber.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAPTransExport1Row() As APTransExport1Row
            Return CType(Me.NewRow,APTransExport1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New APTransExport1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(APTransExport1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.APTransExport1RowChangedEvent) Is Nothing) Then
                RaiseEvent APTransExport1RowChanged(Me, New APTransExport1RowChangeEvent(CType(e.Row,APTransExport1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.APTransExport1RowChangingEvent) Is Nothing) Then
                RaiseEvent APTransExport1RowChanging(Me, New APTransExport1RowChangeEvent(CType(e.Row,APTransExport1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.APTransExport1RowDeletedEvent) Is Nothing) Then
                RaiseEvent APTransExport1RowDeleted(Me, New APTransExport1RowChangeEvent(CType(e.Row,APTransExport1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.APTransExport1RowDeletingEvent) Is Nothing) Then
                RaiseEvent APTransExport1RowDeleting(Me, New APTransExport1RowChangeEvent(CType(e.Row,APTransExport1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAPTransExport1Row(ByVal row As APTransExport1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsGuardian = New dsGuardian
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "APTransExport1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class APTransExport2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnInvoiceNumber As Global.System.Data.DataColumn
        
        Private columnPONumber As Global.System.Data.DataColumn
        
        Private columnPOLineNum As Global.System.Data.DataColumn
        
        Private columnDateReceived As Global.System.Data.DataColumn
        
        Private columnLineDescription As Global.System.Data.DataColumn
        
        Private columnDistributionType As Global.System.Data.DataColumn
        
        Private columnAccountNum As Global.System.Data.DataColumn
        
        Private columnDebit As Global.System.Data.DataColumn
        
        Private columnCredit As Global.System.Data.DataColumn
        
        Private columnTaxCode As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnUnitPrice As Global.System.Data.DataColumn
        
        Private columnIsReversal As Global.System.Data.DataColumn
        
        Private columnTax1Amount As Global.System.Data.DataColumn
        
        Private columnTax1Account As Global.System.Data.DataColumn
        
        Private columnTax1HoldAccount As Global.System.Data.DataColumn
        
        Private columnTax2Amount As Global.System.Data.DataColumn
        
        Private columnTax2Account As Global.System.Data.DataColumn
        
        Private columnTax2HoldAccount As Global.System.Data.DataColumn
        
        Private columnTax3Amount As Global.System.Data.DataColumn
        
        Private columnTax3Account As Global.System.Data.DataColumn
        
        Private columnTax3HoldAccount As Global.System.Data.DataColumn
        
        Private columnTax4Amount As Global.System.Data.DataColumn
        
        Private columnTax4Account As Global.System.Data.DataColumn
        
        Private columnTax4HoldAccount As Global.System.Data.DataColumn
        
        Private columnSEG1 As Global.System.Data.DataColumn
        
        Private columnSEG2 As Global.System.Data.DataColumn
        
        Private columnSEG3 As Global.System.Data.DataColumn
        
        Private columnSEG4 As Global.System.Data.DataColumn
        
        Private columnSEG5 As Global.System.Data.DataColumn
        
        Private columnSEG6 As Global.System.Data.DataColumn
        
        Private columnSEG7 As Global.System.Data.DataColumn
        
        Private columnSEG8 As Global.System.Data.DataColumn
        
        Private columnSEG9 As Global.System.Data.DataColumn
        
        Private columnSEG10 As Global.System.Data.DataColumn
        
        Private columnExpAccount As Global.System.Data.DataColumn
        
        Private columnEXPSEG1 As Global.System.Data.DataColumn
        
        Private columnEXPSEG2 As Global.System.Data.DataColumn
        
        Private columnEXPSEG3 As Global.System.Data.DataColumn
        
        Private columnEXPSEG4 As Global.System.Data.DataColumn
        
        Private columnEXPSEG5 As Global.System.Data.DataColumn
        
        Private columnEXPSEG6 As Global.System.Data.DataColumn
        
        Private columnEXPSEG7 As Global.System.Data.DataColumn
        
        Private columnEXPSEG8 As Global.System.Data.DataColumn
        
        Private columnEXPSEG9 As Global.System.Data.DataColumn
        
        Private columnEXPSEG10 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "APTransExport2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PONumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POLineNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOLineNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateReceivedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateReceived
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LineDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLineDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistributionTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistributionType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AccountNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccountNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DebitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDebit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCredit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnitPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsReversalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsReversal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tax1AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax1Amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tax1AccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax1Account
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tax1HoldAccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax1HoldAccount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tax2AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax2Amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tax2AccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax2Account
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tax2HoldAccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax2HoldAccount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tax3AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax3Amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tax3AccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax3Account
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tax3HoldAccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax3HoldAccount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tax4AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax4Amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tax4AccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax4Account
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tax4HoldAccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax4HoldAccount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExpAccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpAccount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPSEG1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPSEG1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPSEG2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPSEG2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPSEG3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPSEG3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPSEG4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPSEG4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPSEG5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPSEG5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPSEG6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPSEG6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPSEG7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPSEG7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPSEG8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPSEG8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPSEG9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPSEG9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPSEG10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPSEG10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As APTransExport2Row
            Get
                Return CType(Me.Rows(index),APTransExport2Row)
            End Get
        End Property
        
        Public Event APTransExport2RowChanging As APTransExport2RowChangeEventHandler
        
        Public Event APTransExport2RowChanged As APTransExport2RowChangeEventHandler
        
        Public Event APTransExport2RowDeleting As APTransExport2RowChangeEventHandler
        
        Public Event APTransExport2RowDeleted As APTransExport2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAPTransExport2Row(ByVal row As APTransExport2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAPTransExport2Row( _
                    ByVal parentAPTransExport1RowByAPTransExport1_APTransExport2 As APTransExport1Row,  _
                    ByVal PONumber As String,  _
                    ByVal POLineNum As String,  _
                    ByVal DateReceived As String,  _
                    ByVal LineDescription As String,  _
                    ByVal DistributionType As String,  _
                    ByVal AccountNum As String,  _
                    ByVal Debit As String,  _
                    ByVal Credit As String,  _
                    ByVal TaxCode As String,  _
                    ByVal Qty As String,  _
                    ByVal UnitPrice As String,  _
                    ByVal IsReversal As String,  _
                    ByVal Tax1Amount As String,  _
                    ByVal Tax1Account As String,  _
                    ByVal Tax1HoldAccount As String,  _
                    ByVal Tax2Amount As String,  _
                    ByVal Tax2Account As String,  _
                    ByVal Tax2HoldAccount As String,  _
                    ByVal Tax3Amount As String,  _
                    ByVal Tax3Account As String,  _
                    ByVal Tax3HoldAccount As String,  _
                    ByVal Tax4Amount As String,  _
                    ByVal Tax4Account As String,  _
                    ByVal Tax4HoldAccount As String,  _
                    ByVal SEG1 As String,  _
                    ByVal SEG2 As String,  _
                    ByVal SEG3 As String,  _
                    ByVal SEG4 As String,  _
                    ByVal SEG5 As String,  _
                    ByVal SEG6 As String,  _
                    ByVal SEG7 As String,  _
                    ByVal SEG8 As String,  _
                    ByVal SEG9 As String,  _
                    ByVal SEG10 As String,  _
                    ByVal ExpAccount As String,  _
                    ByVal EXPSEG1 As String,  _
                    ByVal EXPSEG2 As String,  _
                    ByVal EXPSEG3 As String,  _
                    ByVal EXPSEG4 As String,  _
                    ByVal EXPSEG5 As String,  _
                    ByVal EXPSEG6 As String,  _
                    ByVal EXPSEG7 As String,  _
                    ByVal EXPSEG8 As String,  _
                    ByVal EXPSEG9 As String,  _
                    ByVal EXPSEG10 As String) As APTransExport2Row
            Dim rowAPTransExport2Row As APTransExport2Row = CType(Me.NewRow,APTransExport2Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, PONumber, POLineNum, DateReceived, LineDescription, DistributionType, AccountNum, Debit, Credit, TaxCode, Qty, UnitPrice, IsReversal, Tax1Amount, Tax1Account, Tax1HoldAccount, Tax2Amount, Tax2Account, Tax2HoldAccount, Tax3Amount, Tax3Account, Tax3HoldAccount, Tax4Amount, Tax4Account, Tax4HoldAccount, SEG1, SEG2, SEG3, SEG4, SEG5, SEG6, SEG7, SEG8, SEG9, SEG10, ExpAccount, EXPSEG1, EXPSEG2, EXPSEG3, EXPSEG4, EXPSEG5, EXPSEG6, EXPSEG7, EXPSEG8, EXPSEG9, EXPSEG10}
            If (Not (parentAPTransExport1RowByAPTransExport1_APTransExport2) Is Nothing) Then
                columnValuesArray(0) = parentAPTransExport1RowByAPTransExport1_APTransExport2(0)
            End If
            rowAPTransExport2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowAPTransExport2Row)
            Return rowAPTransExport2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As APTransExport2DataTable = CType(MyBase.Clone,APTransExport2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New APTransExport2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnInvoiceNumber = MyBase.Columns("InvoiceNumber")
            Me.columnPONumber = MyBase.Columns("PONumber")
            Me.columnPOLineNum = MyBase.Columns("POLineNum")
            Me.columnDateReceived = MyBase.Columns("DateReceived")
            Me.columnLineDescription = MyBase.Columns("LineDescription")
            Me.columnDistributionType = MyBase.Columns("DistributionType")
            Me.columnAccountNum = MyBase.Columns("AccountNum")
            Me.columnDebit = MyBase.Columns("Debit")
            Me.columnCredit = MyBase.Columns("Credit")
            Me.columnTaxCode = MyBase.Columns("TaxCode")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnUnitPrice = MyBase.Columns("UnitPrice")
            Me.columnIsReversal = MyBase.Columns("IsReversal")
            Me.columnTax1Amount = MyBase.Columns("Tax1Amount")
            Me.columnTax1Account = MyBase.Columns("Tax1Account")
            Me.columnTax1HoldAccount = MyBase.Columns("Tax1HoldAccount")
            Me.columnTax2Amount = MyBase.Columns("Tax2Amount")
            Me.columnTax2Account = MyBase.Columns("Tax2Account")
            Me.columnTax2HoldAccount = MyBase.Columns("Tax2HoldAccount")
            Me.columnTax3Amount = MyBase.Columns("Tax3Amount")
            Me.columnTax3Account = MyBase.Columns("Tax3Account")
            Me.columnTax3HoldAccount = MyBase.Columns("Tax3HoldAccount")
            Me.columnTax4Amount = MyBase.Columns("Tax4Amount")
            Me.columnTax4Account = MyBase.Columns("Tax4Account")
            Me.columnTax4HoldAccount = MyBase.Columns("Tax4HoldAccount")
            Me.columnSEG1 = MyBase.Columns("SEG1")
            Me.columnSEG2 = MyBase.Columns("SEG2")
            Me.columnSEG3 = MyBase.Columns("SEG3")
            Me.columnSEG4 = MyBase.Columns("SEG4")
            Me.columnSEG5 = MyBase.Columns("SEG5")
            Me.columnSEG6 = MyBase.Columns("SEG6")
            Me.columnSEG7 = MyBase.Columns("SEG7")
            Me.columnSEG8 = MyBase.Columns("SEG8")
            Me.columnSEG9 = MyBase.Columns("SEG9")
            Me.columnSEG10 = MyBase.Columns("SEG10")
            Me.columnExpAccount = MyBase.Columns("ExpAccount")
            Me.columnEXPSEG1 = MyBase.Columns("EXPSEG1")
            Me.columnEXPSEG2 = MyBase.Columns("EXPSEG2")
            Me.columnEXPSEG3 = MyBase.Columns("EXPSEG3")
            Me.columnEXPSEG4 = MyBase.Columns("EXPSEG4")
            Me.columnEXPSEG5 = MyBase.Columns("EXPSEG5")
            Me.columnEXPSEG6 = MyBase.Columns("EXPSEG6")
            Me.columnEXPSEG7 = MyBase.Columns("EXPSEG7")
            Me.columnEXPSEG8 = MyBase.Columns("EXPSEG8")
            Me.columnEXPSEG9 = MyBase.Columns("EXPSEG9")
            Me.columnEXPSEG10 = MyBase.Columns("EXPSEG10")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnInvoiceNumber = New Global.System.Data.DataColumn("InvoiceNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceNumber)
            Me.columnPONumber = New Global.System.Data.DataColumn("PONumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONumber)
            Me.columnPOLineNum = New Global.System.Data.DataColumn("POLineNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOLineNum)
            Me.columnDateReceived = New Global.System.Data.DataColumn("DateReceived", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateReceived)
            Me.columnLineDescription = New Global.System.Data.DataColumn("LineDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLineDescription)
            Me.columnDistributionType = New Global.System.Data.DataColumn("DistributionType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistributionType)
            Me.columnAccountNum = New Global.System.Data.DataColumn("AccountNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccountNum)
            Me.columnDebit = New Global.System.Data.DataColumn("Debit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDebit)
            Me.columnCredit = New Global.System.Data.DataColumn("Credit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCredit)
            Me.columnTaxCode = New Global.System.Data.DataColumn("TaxCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxCode)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnUnitPrice = New Global.System.Data.DataColumn("UnitPrice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitPrice)
            Me.columnIsReversal = New Global.System.Data.DataColumn("IsReversal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsReversal)
            Me.columnTax1Amount = New Global.System.Data.DataColumn("Tax1Amount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax1Amount)
            Me.columnTax1Account = New Global.System.Data.DataColumn("Tax1Account", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax1Account)
            Me.columnTax1HoldAccount = New Global.System.Data.DataColumn("Tax1HoldAccount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax1HoldAccount)
            Me.columnTax2Amount = New Global.System.Data.DataColumn("Tax2Amount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax2Amount)
            Me.columnTax2Account = New Global.System.Data.DataColumn("Tax2Account", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax2Account)
            Me.columnTax2HoldAccount = New Global.System.Data.DataColumn("Tax2HoldAccount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax2HoldAccount)
            Me.columnTax3Amount = New Global.System.Data.DataColumn("Tax3Amount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax3Amount)
            Me.columnTax3Account = New Global.System.Data.DataColumn("Tax3Account", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax3Account)
            Me.columnTax3HoldAccount = New Global.System.Data.DataColumn("Tax3HoldAccount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax3HoldAccount)
            Me.columnTax4Amount = New Global.System.Data.DataColumn("Tax4Amount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax4Amount)
            Me.columnTax4Account = New Global.System.Data.DataColumn("Tax4Account", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax4Account)
            Me.columnTax4HoldAccount = New Global.System.Data.DataColumn("Tax4HoldAccount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax4HoldAccount)
            Me.columnSEG1 = New Global.System.Data.DataColumn("SEG1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG1)
            Me.columnSEG2 = New Global.System.Data.DataColumn("SEG2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG2)
            Me.columnSEG3 = New Global.System.Data.DataColumn("SEG3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG3)
            Me.columnSEG4 = New Global.System.Data.DataColumn("SEG4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG4)
            Me.columnSEG5 = New Global.System.Data.DataColumn("SEG5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG5)
            Me.columnSEG6 = New Global.System.Data.DataColumn("SEG6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG6)
            Me.columnSEG7 = New Global.System.Data.DataColumn("SEG7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG7)
            Me.columnSEG8 = New Global.System.Data.DataColumn("SEG8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG8)
            Me.columnSEG9 = New Global.System.Data.DataColumn("SEG9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG9)
            Me.columnSEG10 = New Global.System.Data.DataColumn("SEG10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG10)
            Me.columnExpAccount = New Global.System.Data.DataColumn("ExpAccount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpAccount)
            Me.columnEXPSEG1 = New Global.System.Data.DataColumn("EXPSEG1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPSEG1)
            Me.columnEXPSEG2 = New Global.System.Data.DataColumn("EXPSEG2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPSEG2)
            Me.columnEXPSEG3 = New Global.System.Data.DataColumn("EXPSEG3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPSEG3)
            Me.columnEXPSEG4 = New Global.System.Data.DataColumn("EXPSEG4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPSEG4)
            Me.columnEXPSEG5 = New Global.System.Data.DataColumn("EXPSEG5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPSEG5)
            Me.columnEXPSEG6 = New Global.System.Data.DataColumn("EXPSEG6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPSEG6)
            Me.columnEXPSEG7 = New Global.System.Data.DataColumn("EXPSEG7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPSEG7)
            Me.columnEXPSEG8 = New Global.System.Data.DataColumn("EXPSEG8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPSEG8)
            Me.columnEXPSEG9 = New Global.System.Data.DataColumn("EXPSEG9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPSEG9)
            Me.columnEXPSEG10 = New Global.System.Data.DataColumn("EXPSEG10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPSEG10)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAPTransExport2Row() As APTransExport2Row
            Return CType(Me.NewRow,APTransExport2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New APTransExport2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(APTransExport2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.APTransExport2RowChangedEvent) Is Nothing) Then
                RaiseEvent APTransExport2RowChanged(Me, New APTransExport2RowChangeEvent(CType(e.Row,APTransExport2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.APTransExport2RowChangingEvent) Is Nothing) Then
                RaiseEvent APTransExport2RowChanging(Me, New APTransExport2RowChangeEvent(CType(e.Row,APTransExport2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.APTransExport2RowDeletedEvent) Is Nothing) Then
                RaiseEvent APTransExport2RowDeleted(Me, New APTransExport2RowChangeEvent(CType(e.Row,APTransExport2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.APTransExport2RowDeletingEvent) Is Nothing) Then
                RaiseEvent APTransExport2RowDeleting(Me, New APTransExport2RowChangeEvent(CType(e.Row,APTransExport2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAPTransExport2Row(ByVal row As APTransExport2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsGuardian = New dsGuardian
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "APTransExport2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GlTransExportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnBatch_Number As Global.System.Data.DataColumn
        
        Private columnJournal_Number As Global.System.Data.DataColumn
        
        Private columnAccount_Number As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnPostDate As Global.System.Data.DataColumn
        
        Private columnJournal_Description As Global.System.Data.DataColumn
        
        Private columnJournal_Source As Global.System.Data.DataColumn
        
        Private columnCurrType As Global.System.Data.DataColumn
        
        Private columnCurrRate As Global.System.Data.DataColumn
        
        Private columnTransactionDate As Global.System.Data.DataColumn
        
        Private columnSEG1 As Global.System.Data.DataColumn
        
        Private columnSEG2 As Global.System.Data.DataColumn
        
        Private columnSEG3 As Global.System.Data.DataColumn
        
        Private columnSEG4 As Global.System.Data.DataColumn
        
        Private columnSEG5 As Global.System.Data.DataColumn
        
        Private columnSEG6 As Global.System.Data.DataColumn
        
        Private columnSEG7 As Global.System.Data.DataColumn
        
        Private columnSEG8 As Global.System.Data.DataColumn
        
        Private columnSEG9 As Global.System.Data.DataColumn
        
        Private columnSEG10 As Global.System.Data.DataColumn
        
        Private columnGuardian_Source As Global.System.Data.DataColumn
        
        Private columnSupplierNum As Global.System.Data.DataColumn
        
        Private columnSupplierName As Global.System.Data.DataColumn
        
        Private columnPONum As Global.System.Data.DataColumn
        
        Private columnInvoiceNum As Global.System.Data.DataColumn
        
        Private columnInvoiceDate As Global.System.Data.DataColumn
        
        Private columnPaymentDate As Global.System.Data.DataColumn
        
        Private columnCatalogCode As Global.System.Data.DataColumn
        
        Private columnCatalogShort_Desc As Global.System.Data.DataColumn
        
        Private columnPartDesc As Global.System.Data.DataColumn
        
        Private columnSupPartNum As Global.System.Data.DataColumn
        
        Private columnTaxCode As Global.System.Data.DataColumn
        
        Private columnReceiptDate As Global.System.Data.DataColumn
        
        Private columnInvoiceRefNo As Global.System.Data.DataColumn
        
        Private columnDest As Global.System.Data.DataColumn
        
        Private columnIsReversal As Global.System.Data.DataColumn
        
        Private columnReceipt_Journal_Number As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GlTransExport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Batch_NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBatch_Number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Journal_NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJournal_Number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Account_NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccount_Number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PostDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPostDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Journal_DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJournal_Description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Journal_SourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJournal_Source
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransactionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransactionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEG10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEG10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Guardian_SourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGuardian_Source
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupplierNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplierNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupplierNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplierName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PONumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CatalogCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCatalogCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CatalogShort_DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCatalogShort_Desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PartDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupPartNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupPartNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceRefNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceRefNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsReversalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsReversal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Receipt_Journal_NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceipt_Journal_Number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GlTransExportRow
            Get
                Return CType(Me.Rows(index),GlTransExportRow)
            End Get
        End Property
        
        Public Event GlTransExportRowChanging As GlTransExportRowChangeEventHandler
        
        Public Event GlTransExportRowChanged As GlTransExportRowChangeEventHandler
        
        Public Event GlTransExportRowDeleting As GlTransExportRowChangeEventHandler
        
        Public Event GlTransExportRowDeleted As GlTransExportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGlTransExportRow(ByVal row As GlTransExportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGlTransExportRow( _
                    ByVal Batch_Number As String,  _
                    ByVal Journal_Number As String,  _
                    ByVal Account_Number As String,  _
                    ByVal Amount As String,  _
                    ByVal PostDate As String,  _
                    ByVal Journal_Description As String,  _
                    ByVal Journal_Source As String,  _
                    ByVal CurrType As String,  _
                    ByVal CurrRate As String,  _
                    ByVal TransactionDate As String,  _
                    ByVal SEG1 As String,  _
                    ByVal SEG2 As String,  _
                    ByVal SEG3 As String,  _
                    ByVal SEG4 As String,  _
                    ByVal SEG5 As String,  _
                    ByVal SEG6 As String,  _
                    ByVal SEG7 As String,  _
                    ByVal SEG8 As String,  _
                    ByVal SEG9 As String,  _
                    ByVal SEG10 As String,  _
                    ByVal Guardian_Source As String,  _
                    ByVal SupplierNum As String,  _
                    ByVal SupplierName As String,  _
                    ByVal PONum As String,  _
                    ByVal InvoiceNum As String,  _
                    ByVal InvoiceDate As String,  _
                    ByVal PaymentDate As String,  _
                    ByVal CatalogCode As String,  _
                    ByVal CatalogShort_Desc As String,  _
                    ByVal PartDesc As String,  _
                    ByVal SupPartNum As String,  _
                    ByVal TaxCode As String,  _
                    ByVal ReceiptDate As String,  _
                    ByVal InvoiceRefNo As String,  _
                    ByVal Dest As String,  _
                    ByVal IsReversal As String,  _
                    ByVal Receipt_Journal_Number As String) As GlTransExportRow
            Dim rowGlTransExportRow As GlTransExportRow = CType(Me.NewRow,GlTransExportRow)
            Dim columnValuesArray() As Object = New Object() {Batch_Number, Journal_Number, Account_Number, Amount, PostDate, Journal_Description, Journal_Source, CurrType, CurrRate, TransactionDate, SEG1, SEG2, SEG3, SEG4, SEG5, SEG6, SEG7, SEG8, SEG9, SEG10, Guardian_Source, SupplierNum, SupplierName, PONum, InvoiceNum, InvoiceDate, PaymentDate, CatalogCode, CatalogShort_Desc, PartDesc, SupPartNum, TaxCode, ReceiptDate, InvoiceRefNo, Dest, IsReversal, Receipt_Journal_Number}
            rowGlTransExportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGlTransExportRow)
            Return rowGlTransExportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GlTransExportDataTable = CType(MyBase.Clone,GlTransExportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GlTransExportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBatch_Number = MyBase.Columns("Batch_Number")
            Me.columnJournal_Number = MyBase.Columns("Journal_Number")
            Me.columnAccount_Number = MyBase.Columns("Account_Number")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnPostDate = MyBase.Columns("PostDate")
            Me.columnJournal_Description = MyBase.Columns("Journal_Description")
            Me.columnJournal_Source = MyBase.Columns("Journal_Source")
            Me.columnCurrType = MyBase.Columns("CurrType")
            Me.columnCurrRate = MyBase.Columns("CurrRate")
            Me.columnTransactionDate = MyBase.Columns("TransactionDate")
            Me.columnSEG1 = MyBase.Columns("SEG1")
            Me.columnSEG2 = MyBase.Columns("SEG2")
            Me.columnSEG3 = MyBase.Columns("SEG3")
            Me.columnSEG4 = MyBase.Columns("SEG4")
            Me.columnSEG5 = MyBase.Columns("SEG5")
            Me.columnSEG6 = MyBase.Columns("SEG6")
            Me.columnSEG7 = MyBase.Columns("SEG7")
            Me.columnSEG8 = MyBase.Columns("SEG8")
            Me.columnSEG9 = MyBase.Columns("SEG9")
            Me.columnSEG10 = MyBase.Columns("SEG10")
            Me.columnGuardian_Source = MyBase.Columns("Guardian_Source")
            Me.columnSupplierNum = MyBase.Columns("SupplierNum")
            Me.columnSupplierName = MyBase.Columns("SupplierName")
            Me.columnPONum = MyBase.Columns("PONum")
            Me.columnInvoiceNum = MyBase.Columns("InvoiceNum")
            Me.columnInvoiceDate = MyBase.Columns("InvoiceDate")
            Me.columnPaymentDate = MyBase.Columns("PaymentDate")
            Me.columnCatalogCode = MyBase.Columns("CatalogCode")
            Me.columnCatalogShort_Desc = MyBase.Columns("CatalogShort_Desc")
            Me.columnPartDesc = MyBase.Columns("PartDesc")
            Me.columnSupPartNum = MyBase.Columns("SupPartNum")
            Me.columnTaxCode = MyBase.Columns("TaxCode")
            Me.columnReceiptDate = MyBase.Columns("ReceiptDate")
            Me.columnInvoiceRefNo = MyBase.Columns("InvoiceRefNo")
            Me.columnDest = MyBase.Columns("Dest")
            Me.columnIsReversal = MyBase.Columns("IsReversal")
            Me.columnReceipt_Journal_Number = MyBase.Columns("Receipt_Journal_Number")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBatch_Number = New Global.System.Data.DataColumn("Batch_Number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBatch_Number)
            Me.columnJournal_Number = New Global.System.Data.DataColumn("Journal_Number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJournal_Number)
            Me.columnAccount_Number = New Global.System.Data.DataColumn("Account_Number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccount_Number)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnPostDate = New Global.System.Data.DataColumn("PostDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPostDate)
            Me.columnJournal_Description = New Global.System.Data.DataColumn("Journal_Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJournal_Description)
            Me.columnJournal_Source = New Global.System.Data.DataColumn("Journal_Source", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJournal_Source)
            Me.columnCurrType = New Global.System.Data.DataColumn("CurrType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrType)
            Me.columnCurrRate = New Global.System.Data.DataColumn("CurrRate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrRate)
            Me.columnTransactionDate = New Global.System.Data.DataColumn("TransactionDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransactionDate)
            Me.columnSEG1 = New Global.System.Data.DataColumn("SEG1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG1)
            Me.columnSEG2 = New Global.System.Data.DataColumn("SEG2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG2)
            Me.columnSEG3 = New Global.System.Data.DataColumn("SEG3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG3)
            Me.columnSEG4 = New Global.System.Data.DataColumn("SEG4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG4)
            Me.columnSEG5 = New Global.System.Data.DataColumn("SEG5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG5)
            Me.columnSEG6 = New Global.System.Data.DataColumn("SEG6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG6)
            Me.columnSEG7 = New Global.System.Data.DataColumn("SEG7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG7)
            Me.columnSEG8 = New Global.System.Data.DataColumn("SEG8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG8)
            Me.columnSEG9 = New Global.System.Data.DataColumn("SEG9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG9)
            Me.columnSEG10 = New Global.System.Data.DataColumn("SEG10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEG10)
            Me.columnGuardian_Source = New Global.System.Data.DataColumn("Guardian_Source", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGuardian_Source)
            Me.columnSupplierNum = New Global.System.Data.DataColumn("SupplierNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplierNum)
            Me.columnSupplierName = New Global.System.Data.DataColumn("SupplierName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplierName)
            Me.columnPONum = New Global.System.Data.DataColumn("PONum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONum)
            Me.columnInvoiceNum = New Global.System.Data.DataColumn("InvoiceNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceNum)
            Me.columnInvoiceDate = New Global.System.Data.DataColumn("InvoiceDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceDate)
            Me.columnPaymentDate = New Global.System.Data.DataColumn("PaymentDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentDate)
            Me.columnCatalogCode = New Global.System.Data.DataColumn("CatalogCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCatalogCode)
            Me.columnCatalogShort_Desc = New Global.System.Data.DataColumn("CatalogShort_Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCatalogShort_Desc)
            Me.columnPartDesc = New Global.System.Data.DataColumn("PartDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartDesc)
            Me.columnSupPartNum = New Global.System.Data.DataColumn("SupPartNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupPartNum)
            Me.columnTaxCode = New Global.System.Data.DataColumn("TaxCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxCode)
            Me.columnReceiptDate = New Global.System.Data.DataColumn("ReceiptDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptDate)
            Me.columnInvoiceRefNo = New Global.System.Data.DataColumn("InvoiceRefNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceRefNo)
            Me.columnDest = New Global.System.Data.DataColumn("Dest", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDest)
            Me.columnIsReversal = New Global.System.Data.DataColumn("IsReversal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsReversal)
            Me.columnReceipt_Journal_Number = New Global.System.Data.DataColumn("Receipt_Journal_Number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceipt_Journal_Number)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGlTransExportRow() As GlTransExportRow
            Return CType(Me.NewRow,GlTransExportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GlTransExportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GlTransExportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GlTransExportRowChangedEvent) Is Nothing) Then
                RaiseEvent GlTransExportRowChanged(Me, New GlTransExportRowChangeEvent(CType(e.Row,GlTransExportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GlTransExportRowChangingEvent) Is Nothing) Then
                RaiseEvent GlTransExportRowChanging(Me, New GlTransExportRowChangeEvent(CType(e.Row,GlTransExportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GlTransExportRowDeletedEvent) Is Nothing) Then
                RaiseEvent GlTransExportRowDeleted(Me, New GlTransExportRowChangeEvent(CType(e.Row,GlTransExportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GlTransExportRowDeletingEvent) Is Nothing) Then
                RaiseEvent GlTransExportRowDeleting(Me, New GlTransExportRowChangeEvent(CType(e.Row,GlTransExportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGlTransExportRow(ByVal row As GlTransExportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsGuardian = New dsGuardian
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GlTransExportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Journal_HeadersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnBATCHID As Global.System.Data.DataColumn
        
        Private columnBTCHENTRY As Global.System.Data.DataColumn
        
        Private columnSRCELEDGER As Global.System.Data.DataColumn
        
        Private columnSRCETYPE As Global.System.Data.DataColumn
        
        Private columnDATEENTRY As Global.System.Data.DataColumn
        
        Private columnFSCSYR As Global.System.Data.DataColumn
        
        Private columnFSCSPERD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Journal_Headers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BATCHIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCHID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BTCHENTRYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBTCHENTRY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SRCELEDGERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSRCELEDGER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SRCETYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSRCETYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEENTRYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEENTRY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FSCSYRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFSCSYR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FSCSPERDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFSCSPERD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Journal_HeadersRow
            Get
                Return CType(Me.Rows(index),Journal_HeadersRow)
            End Get
        End Property
        
        Public Event Journal_HeadersRowChanging As Journal_HeadersRowChangeEventHandler
        
        Public Event Journal_HeadersRowChanged As Journal_HeadersRowChangeEventHandler
        
        Public Event Journal_HeadersRowDeleting As Journal_HeadersRowChangeEventHandler
        
        Public Event Journal_HeadersRowDeleted As Journal_HeadersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddJournal_HeadersRow(ByVal row As Journal_HeadersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddJournal_HeadersRow(ByVal BATCHID As String, ByVal BTCHENTRY As String, ByVal SRCELEDGER As String, ByVal SRCETYPE As String, ByVal DATEENTRY As String, ByVal FSCSYR As String, ByVal FSCSPERD As String) As Journal_HeadersRow
            Dim rowJournal_HeadersRow As Journal_HeadersRow = CType(Me.NewRow,Journal_HeadersRow)
            Dim columnValuesArray() As Object = New Object() {BATCHID, BTCHENTRY, SRCELEDGER, SRCETYPE, DATEENTRY, FSCSYR, FSCSPERD}
            rowJournal_HeadersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowJournal_HeadersRow)
            Return rowJournal_HeadersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Journal_HeadersDataTable = CType(MyBase.Clone,Journal_HeadersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Journal_HeadersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBATCHID = MyBase.Columns("BATCHID")
            Me.columnBTCHENTRY = MyBase.Columns("BTCHENTRY")
            Me.columnSRCELEDGER = MyBase.Columns("SRCELEDGER")
            Me.columnSRCETYPE = MyBase.Columns("SRCETYPE")
            Me.columnDATEENTRY = MyBase.Columns("DATEENTRY")
            Me.columnFSCSYR = MyBase.Columns("FSCSYR")
            Me.columnFSCSPERD = MyBase.Columns("FSCSPERD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBATCHID = New Global.System.Data.DataColumn("BATCHID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCHID)
            Me.columnBTCHENTRY = New Global.System.Data.DataColumn("BTCHENTRY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBTCHENTRY)
            Me.columnSRCELEDGER = New Global.System.Data.DataColumn("SRCELEDGER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSRCELEDGER)
            Me.columnSRCETYPE = New Global.System.Data.DataColumn("SRCETYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSRCETYPE)
            Me.columnDATEENTRY = New Global.System.Data.DataColumn("DATEENTRY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEENTRY)
            Me.columnFSCSYR = New Global.System.Data.DataColumn("FSCSYR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFSCSYR)
            Me.columnFSCSPERD = New Global.System.Data.DataColumn("FSCSPERD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFSCSPERD)
            Me.columnSRCELEDGER.DefaultValue = CType("GL",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewJournal_HeadersRow() As Journal_HeadersRow
            Return CType(Me.NewRow,Journal_HeadersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Journal_HeadersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Journal_HeadersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Journal_HeadersRowChangedEvent) Is Nothing) Then
                RaiseEvent Journal_HeadersRowChanged(Me, New Journal_HeadersRowChangeEvent(CType(e.Row,Journal_HeadersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Journal_HeadersRowChangingEvent) Is Nothing) Then
                RaiseEvent Journal_HeadersRowChanging(Me, New Journal_HeadersRowChangeEvent(CType(e.Row,Journal_HeadersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Journal_HeadersRowDeletedEvent) Is Nothing) Then
                RaiseEvent Journal_HeadersRowDeleted(Me, New Journal_HeadersRowChangeEvent(CType(e.Row,Journal_HeadersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Journal_HeadersRowDeletingEvent) Is Nothing) Then
                RaiseEvent Journal_HeadersRowDeleting(Me, New Journal_HeadersRowChangeEvent(CType(e.Row,Journal_HeadersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveJournal_HeadersRow(ByVal row As Journal_HeadersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsGuardian = New dsGuardian
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Journal_HeadersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Journal_DetailsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnBATCHNBR As Global.System.Data.DataColumn
        
        Private columnJOURNALID As Global.System.Data.DataColumn
        
        Private columnTRANSNBR As Global.System.Data.DataColumn
        
        Private columnACCTID As Global.System.Data.DataColumn
        
        Private columnTRANSAMT As Global.System.Data.DataColumn
        
        Private columnTRANSDESC As Global.System.Data.DataColumn
        
        Private columnTRANSDATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Journal_Details"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BATCHNBRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCHNBR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JOURNALIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJOURNALID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANSNBRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSNBR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANSAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANSDESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSDESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANSDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Journal_DetailsRow
            Get
                Return CType(Me.Rows(index),Journal_DetailsRow)
            End Get
        End Property
        
        Public Event Journal_DetailsRowChanging As Journal_DetailsRowChangeEventHandler
        
        Public Event Journal_DetailsRowChanged As Journal_DetailsRowChangeEventHandler
        
        Public Event Journal_DetailsRowDeleting As Journal_DetailsRowChangeEventHandler
        
        Public Event Journal_DetailsRowDeleted As Journal_DetailsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddJournal_DetailsRow(ByVal row As Journal_DetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddJournal_DetailsRow(ByVal BATCHNBR As String, ByVal JOURNALID As String, ByVal TRANSNBR As String, ByVal ACCTID As String, ByVal TRANSAMT As String, ByVal TRANSDESC As String, ByVal TRANSDATE As String) As Journal_DetailsRow
            Dim rowJournal_DetailsRow As Journal_DetailsRow = CType(Me.NewRow,Journal_DetailsRow)
            Dim columnValuesArray() As Object = New Object() {BATCHNBR, JOURNALID, TRANSNBR, ACCTID, TRANSAMT, TRANSDESC, TRANSDATE}
            rowJournal_DetailsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowJournal_DetailsRow)
            Return rowJournal_DetailsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Journal_DetailsDataTable = CType(MyBase.Clone,Journal_DetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Journal_DetailsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBATCHNBR = MyBase.Columns("BATCHNBR")
            Me.columnJOURNALID = MyBase.Columns("JOURNALID")
            Me.columnTRANSNBR = MyBase.Columns("TRANSNBR")
            Me.columnACCTID = MyBase.Columns("ACCTID")
            Me.columnTRANSAMT = MyBase.Columns("TRANSAMT")
            Me.columnTRANSDESC = MyBase.Columns("TRANSDESC")
            Me.columnTRANSDATE = MyBase.Columns("TRANSDATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBATCHNBR = New Global.System.Data.DataColumn("BATCHNBR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCHNBR)
            Me.columnJOURNALID = New Global.System.Data.DataColumn("JOURNALID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJOURNALID)
            Me.columnTRANSNBR = New Global.System.Data.DataColumn("TRANSNBR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSNBR)
            Me.columnACCTID = New Global.System.Data.DataColumn("ACCTID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTID)
            Me.columnTRANSAMT = New Global.System.Data.DataColumn("TRANSAMT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSAMT)
            Me.columnTRANSDESC = New Global.System.Data.DataColumn("TRANSDESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSDESC)
            Me.columnTRANSDATE = New Global.System.Data.DataColumn("TRANSDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSDATE)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewJournal_DetailsRow() As Journal_DetailsRow
            Return CType(Me.NewRow,Journal_DetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Journal_DetailsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Journal_DetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Journal_DetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent Journal_DetailsRowChanged(Me, New Journal_DetailsRowChangeEvent(CType(e.Row,Journal_DetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Journal_DetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent Journal_DetailsRowChanging(Me, New Journal_DetailsRowChangeEvent(CType(e.Row,Journal_DetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Journal_DetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent Journal_DetailsRowDeleted(Me, New Journal_DetailsRowChangeEvent(CType(e.Row,Journal_DetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Journal_DetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent Journal_DetailsRowDeleting(Me, New Journal_DetailsRowChangeEvent(CType(e.Row,Journal_DetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveJournal_DetailsRow(ByVal row As Journal_DetailsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsGuardian = New dsGuardian
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Journal_DetailsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Invoice_HeaderDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCNTBTCH As Global.System.Data.DataColumn
        
        Private columnCNTITEM As Global.System.Data.DataColumn
        
        Private columnIDVEND As Global.System.Data.DataColumn
        
        Private columnIDINVC As Global.System.Data.DataColumn
        
        Private columnTEXTTRX As Global.System.Data.DataColumn
        
        Private columnORDRNBR As Global.System.Data.DataColumn
        
        Private columnPONBR As Global.System.Data.DataColumn
        
        Private columnINVCDESC As Global.System.Data.DataColumn
        
        Private columnDATEINVC As Global.System.Data.DataColumn
        
        Private columnAMTGROSTOT As Global.System.Data.DataColumn
        
        Private columnTERMCODE As Global.System.Data.DataColumn
        
        Private columnSWTXBSECTL As Global.System.Data.DataColumn
        
        Private columnSWTXCTLRC As Global.System.Data.DataColumn
        
        Private columnSWCALCTX As Global.System.Data.DataColumn
        
        Private columnAMTTAX1 As Global.System.Data.DataColumn
        
        Private columnAMTTAX2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Invoice_Header"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CNTBTCHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNTBTCH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CNTITEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNTITEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDVENDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDVEND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDINVCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDINVC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEXTTRXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEXTTRX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDRNBRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDRNBR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PONBRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONBR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVCDESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVCDESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEINVCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEINVC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTGROSTOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTGROSTOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TERMCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTERMCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SWTXBSECTLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWTXBSECTL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SWTXCTLRCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWTXCTLRC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SWCALCTXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWCALCTX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTTAX1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTTAX1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTTAX2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTTAX2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Invoice_HeaderRow
            Get
                Return CType(Me.Rows(index),Invoice_HeaderRow)
            End Get
        End Property
        
        Public Event Invoice_HeaderRowChanging As Invoice_HeaderRowChangeEventHandler
        
        Public Event Invoice_HeaderRowChanged As Invoice_HeaderRowChangeEventHandler
        
        Public Event Invoice_HeaderRowDeleting As Invoice_HeaderRowChangeEventHandler
        
        Public Event Invoice_HeaderRowDeleted As Invoice_HeaderRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddInvoice_HeaderRow(ByVal row As Invoice_HeaderRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddInvoice_HeaderRow(ByVal CNTBTCH As String, ByVal IDVEND As String, ByVal IDINVC As String, ByVal TEXTTRX As String, ByVal ORDRNBR As String, ByVal PONBR As String, ByVal INVCDESC As String, ByVal DATEINVC As String, ByVal AMTGROSTOT As Decimal, ByVal TERMCODE As String, ByVal SWTXBSECTL As String, ByVal SWTXCTLRC As String, ByVal SWCALCTX As String, ByVal AMTTAX1 As String, ByVal AMTTAX2 As String) As Invoice_HeaderRow
            Dim rowInvoice_HeaderRow As Invoice_HeaderRow = CType(Me.NewRow,Invoice_HeaderRow)
            Dim columnValuesArray() As Object = New Object() {CNTBTCH, Nothing, IDVEND, IDINVC, TEXTTRX, ORDRNBR, PONBR, INVCDESC, DATEINVC, AMTGROSTOT, TERMCODE, SWTXBSECTL, SWTXCTLRC, SWCALCTX, AMTTAX1, AMTTAX2}
            rowInvoice_HeaderRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowInvoice_HeaderRow)
            Return rowInvoice_HeaderRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Invoice_HeaderDataTable = CType(MyBase.Clone,Invoice_HeaderDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Invoice_HeaderDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCNTBTCH = MyBase.Columns("CNTBTCH")
            Me.columnCNTITEM = MyBase.Columns("CNTITEM")
            Me.columnIDVEND = MyBase.Columns("IDVEND")
            Me.columnIDINVC = MyBase.Columns("IDINVC")
            Me.columnTEXTTRX = MyBase.Columns("TEXTTRX")
            Me.columnORDRNBR = MyBase.Columns("ORDRNBR")
            Me.columnPONBR = MyBase.Columns("PONBR")
            Me.columnINVCDESC = MyBase.Columns("INVCDESC")
            Me.columnDATEINVC = MyBase.Columns("DATEINVC")
            Me.columnAMTGROSTOT = MyBase.Columns("AMTGROSTOT")
            Me.columnTERMCODE = MyBase.Columns("TERMCODE")
            Me.columnSWTXBSECTL = MyBase.Columns("SWTXBSECTL")
            Me.columnSWTXCTLRC = MyBase.Columns("SWTXCTLRC")
            Me.columnSWCALCTX = MyBase.Columns("SWCALCTX")
            Me.columnAMTTAX1 = MyBase.Columns("AMTTAX1")
            Me.columnAMTTAX2 = MyBase.Columns("AMTTAX2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCNTBTCH = New Global.System.Data.DataColumn("CNTBTCH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNTBTCH)
            Me.columnCNTITEM = New Global.System.Data.DataColumn("CNTITEM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNTITEM)
            Me.columnIDVEND = New Global.System.Data.DataColumn("IDVEND", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDVEND)
            Me.columnIDINVC = New Global.System.Data.DataColumn("IDINVC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDINVC)
            Me.columnTEXTTRX = New Global.System.Data.DataColumn("TEXTTRX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEXTTRX)
            Me.columnORDRNBR = New Global.System.Data.DataColumn("ORDRNBR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDRNBR)
            Me.columnPONBR = New Global.System.Data.DataColumn("PONBR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONBR)
            Me.columnINVCDESC = New Global.System.Data.DataColumn("INVCDESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVCDESC)
            Me.columnDATEINVC = New Global.System.Data.DataColumn("DATEINVC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEINVC)
            Me.columnAMTGROSTOT = New Global.System.Data.DataColumn("AMTGROSTOT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTGROSTOT)
            Me.columnTERMCODE = New Global.System.Data.DataColumn("TERMCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTERMCODE)
            Me.columnSWTXBSECTL = New Global.System.Data.DataColumn("SWTXBSECTL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWTXBSECTL)
            Me.columnSWTXCTLRC = New Global.System.Data.DataColumn("SWTXCTLRC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWTXCTLRC)
            Me.columnSWCALCTX = New Global.System.Data.DataColumn("SWCALCTX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWCALCTX)
            Me.columnAMTTAX1 = New Global.System.Data.DataColumn("AMTTAX1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTTAX1)
            Me.columnAMTTAX2 = New Global.System.Data.DataColumn("AMTTAX2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTTAX2)
            Me.columnCNTITEM.AutoIncrement = true
            Me.columnCNTITEM.AutoIncrementSeed = -1
            Me.columnCNTITEM.AutoIncrementStep = -1
            Me.columnTEXTTRX.DefaultValue = CType("1",String)
            Me.columnSWTXBSECTL.DefaultValue = CType("0",String)
            Me.columnSWTXCTLRC.DefaultValue = CType("0",String)
            Me.columnSWCALCTX.DefaultValue = CType("0",String)
            Me.columnAMTTAX1.DefaultValue = CType("20",String)
            Me.columnAMTTAX2.DefaultValue = CType("15",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewInvoice_HeaderRow() As Invoice_HeaderRow
            Return CType(Me.NewRow,Invoice_HeaderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Invoice_HeaderRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Invoice_HeaderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Invoice_HeaderRowChangedEvent) Is Nothing) Then
                RaiseEvent Invoice_HeaderRowChanged(Me, New Invoice_HeaderRowChangeEvent(CType(e.Row,Invoice_HeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Invoice_HeaderRowChangingEvent) Is Nothing) Then
                RaiseEvent Invoice_HeaderRowChanging(Me, New Invoice_HeaderRowChangeEvent(CType(e.Row,Invoice_HeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Invoice_HeaderRowDeletedEvent) Is Nothing) Then
                RaiseEvent Invoice_HeaderRowDeleted(Me, New Invoice_HeaderRowChangeEvent(CType(e.Row,Invoice_HeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Invoice_HeaderRowDeletingEvent) Is Nothing) Then
                RaiseEvent Invoice_HeaderRowDeleting(Me, New Invoice_HeaderRowChangeEvent(CType(e.Row,Invoice_HeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveInvoice_HeaderRow(ByVal row As Invoice_HeaderRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsGuardian = New dsGuardian
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Invoice_HeaderDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Invoice_DetailsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCNTBTCH As Global.System.Data.DataColumn
        
        Private columnCNTITEM As Global.System.Data.DataColumn
        
        Private columnCNTLINE As Global.System.Data.DataColumn
        
        Private columnIDGLACCT As Global.System.Data.DataColumn
        
        Private columnAMTDIST As Global.System.Data.DataColumn
        
        Private columnTEXTDESC As Global.System.Data.DataColumn
        
        Private columnAMTTAX1 As Global.System.Data.DataColumn
        
        Private columnAMTTAX2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Invoice_Details"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CNTBTCHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNTBTCH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CNTITEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNTITEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CNTLINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNTLINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDGLACCTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDGLACCT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTDISTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTDIST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEXTDESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEXTDESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTTAX1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTTAX1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTTAX2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTTAX2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Invoice_DetailsRow
            Get
                Return CType(Me.Rows(index),Invoice_DetailsRow)
            End Get
        End Property
        
        Public Event Invoice_DetailsRowChanging As Invoice_DetailsRowChangeEventHandler
        
        Public Event Invoice_DetailsRowChanged As Invoice_DetailsRowChangeEventHandler
        
        Public Event Invoice_DetailsRowDeleting As Invoice_DetailsRowChangeEventHandler
        
        Public Event Invoice_DetailsRowDeleted As Invoice_DetailsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddInvoice_DetailsRow(ByVal row As Invoice_DetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddInvoice_DetailsRow(ByVal CNTBTCH As String, ByVal CNTITEM As Integer, ByVal IDGLACCT As String, ByVal AMTDIST As String, ByVal TEXTDESC As String, ByVal AMTTAX1 As Decimal, ByVal AMTTAX2 As Decimal) As Invoice_DetailsRow
            Dim rowInvoice_DetailsRow As Invoice_DetailsRow = CType(Me.NewRow,Invoice_DetailsRow)
            Dim columnValuesArray() As Object = New Object() {CNTBTCH, CNTITEM, Nothing, IDGLACCT, AMTDIST, TEXTDESC, AMTTAX1, AMTTAX2}
            rowInvoice_DetailsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowInvoice_DetailsRow)
            Return rowInvoice_DetailsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Invoice_DetailsDataTable = CType(MyBase.Clone,Invoice_DetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Invoice_DetailsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCNTBTCH = MyBase.Columns("CNTBTCH")
            Me.columnCNTITEM = MyBase.Columns("CNTITEM")
            Me.columnCNTLINE = MyBase.Columns("CNTLINE")
            Me.columnIDGLACCT = MyBase.Columns("IDGLACCT")
            Me.columnAMTDIST = MyBase.Columns("AMTDIST")
            Me.columnTEXTDESC = MyBase.Columns("TEXTDESC")
            Me.columnAMTTAX1 = MyBase.Columns("AMTTAX1")
            Me.columnAMTTAX2 = MyBase.Columns("AMTTAX2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCNTBTCH = New Global.System.Data.DataColumn("CNTBTCH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNTBTCH)
            Me.columnCNTITEM = New Global.System.Data.DataColumn("CNTITEM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNTITEM)
            Me.columnCNTLINE = New Global.System.Data.DataColumn("CNTLINE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNTLINE)
            Me.columnIDGLACCT = New Global.System.Data.DataColumn("IDGLACCT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDGLACCT)
            Me.columnAMTDIST = New Global.System.Data.DataColumn("AMTDIST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTDIST)
            Me.columnTEXTDESC = New Global.System.Data.DataColumn("TEXTDESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEXTDESC)
            Me.columnAMTTAX1 = New Global.System.Data.DataColumn("AMTTAX1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTTAX1)
            Me.columnAMTTAX2 = New Global.System.Data.DataColumn("AMTTAX2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTTAX2)
            Me.columnCNTLINE.AutoIncrement = true
            Me.columnCNTLINE.AutoIncrementSeed = -1
            Me.columnCNTLINE.AutoIncrementStep = -1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewInvoice_DetailsRow() As Invoice_DetailsRow
            Return CType(Me.NewRow,Invoice_DetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Invoice_DetailsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Invoice_DetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Invoice_DetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent Invoice_DetailsRowChanged(Me, New Invoice_DetailsRowChangeEvent(CType(e.Row,Invoice_DetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Invoice_DetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent Invoice_DetailsRowChanging(Me, New Invoice_DetailsRowChangeEvent(CType(e.Row,Invoice_DetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Invoice_DetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent Invoice_DetailsRowDeleted(Me, New Invoice_DetailsRowChangeEvent(CType(e.Row,Invoice_DetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Invoice_DetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent Invoice_DetailsRowDeleting(Me, New Invoice_DetailsRowChangeEvent(CType(e.Row,Invoice_DetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveInvoice_DetailsRow(ByVal row As Invoice_DetailsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsGuardian = New dsGuardian
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Invoice_DetailsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Invoice_Payment_Schedules_DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCNTBTCH As Global.System.Data.DataColumn
        
        Private columnCNTITEM As Global.System.Data.DataColumn
        
        Private columnCNTPAYM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Invoice_Payment_Schedules "
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CNTBTCHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNTBTCH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CNTITEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNTITEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CNTPAYMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNTPAYM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Invoice_Payment_Schedules_Row
            Get
                Return CType(Me.Rows(index),Invoice_Payment_Schedules_Row)
            End Get
        End Property
        
        Public Event Invoice_Payment_Schedules_RowChanging As Invoice_Payment_Schedules_RowChangeEventHandler
        
        Public Event Invoice_Payment_Schedules_RowChanged As Invoice_Payment_Schedules_RowChangeEventHandler
        
        Public Event Invoice_Payment_Schedules_RowDeleting As Invoice_Payment_Schedules_RowChangeEventHandler
        
        Public Event Invoice_Payment_Schedules_RowDeleted As Invoice_Payment_Schedules_RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddInvoice_Payment_Schedules_Row(ByVal row As Invoice_Payment_Schedules_Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddInvoice_Payment_Schedules_Row(ByVal CNTBTCH As String, ByVal CNTITEM As String, ByVal CNTPAYM As String) As Invoice_Payment_Schedules_Row
            Dim rowInvoice_Payment_Schedules_Row As Invoice_Payment_Schedules_Row = CType(Me.NewRow,Invoice_Payment_Schedules_Row)
            Dim columnValuesArray() As Object = New Object() {CNTBTCH, CNTITEM, CNTPAYM}
            rowInvoice_Payment_Schedules_Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowInvoice_Payment_Schedules_Row)
            Return rowInvoice_Payment_Schedules_Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Invoice_Payment_Schedules_DataTable = CType(MyBase.Clone,Invoice_Payment_Schedules_DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Invoice_Payment_Schedules_DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCNTBTCH = MyBase.Columns("CNTBTCH")
            Me.columnCNTITEM = MyBase.Columns("CNTITEM")
            Me.columnCNTPAYM = MyBase.Columns("CNTPAYM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCNTBTCH = New Global.System.Data.DataColumn("CNTBTCH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNTBTCH)
            Me.columnCNTITEM = New Global.System.Data.DataColumn("CNTITEM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNTITEM)
            Me.columnCNTPAYM = New Global.System.Data.DataColumn("CNTPAYM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNTPAYM)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewInvoice_Payment_Schedules_Row() As Invoice_Payment_Schedules_Row
            Return CType(Me.NewRow,Invoice_Payment_Schedules_Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Invoice_Payment_Schedules_Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Invoice_Payment_Schedules_Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Invoice_Payment_Schedules_RowChangedEvent) Is Nothing) Then
                RaiseEvent Invoice_Payment_Schedules_RowChanged(Me, New Invoice_Payment_Schedules_RowChangeEvent(CType(e.Row,Invoice_Payment_Schedules_Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Invoice_Payment_Schedules_RowChangingEvent) Is Nothing) Then
                RaiseEvent Invoice_Payment_Schedules_RowChanging(Me, New Invoice_Payment_Schedules_RowChangeEvent(CType(e.Row,Invoice_Payment_Schedules_Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Invoice_Payment_Schedules_RowDeletedEvent) Is Nothing) Then
                RaiseEvent Invoice_Payment_Schedules_RowDeleted(Me, New Invoice_Payment_Schedules_RowChangeEvent(CType(e.Row,Invoice_Payment_Schedules_Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Invoice_Payment_Schedules_RowDeletingEvent) Is Nothing) Then
                RaiseEvent Invoice_Payment_Schedules_RowDeleting(Me, New Invoice_Payment_Schedules_RowChangeEvent(CType(e.Row,Invoice_Payment_Schedules_Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveInvoice_Payment_Schedules_Row(ByVal row As Invoice_Payment_Schedules_Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsGuardian = New dsGuardian
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Invoice_Payment_Schedules_DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class _Account_txtDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private _columnAccount_ As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Account.txt"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Account_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnAccount_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As _Account_txtRow
            Get
                Return CType(Me.Rows(index),_Account_txtRow)
            End Get
        End Property
        
        Public Event _Account_txtRowChanging As _Account_txtRowChangeEventHandler
        
        Public Event _Account_txtRowChanged As _Account_txtRowChangeEventHandler
        
        Public Event _Account_txtRowDeleting As _Account_txtRowChangeEventHandler
        
        Public Event _Account_txtRowDeleted As _Account_txtRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Add_Account_txtRow(ByVal row As _Account_txtRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Add_Account_txtRow(ByVal _Account_ As String, ByVal Description As String, ByVal Status As Short) As _Account_txtRow
            Dim row_Account_txtRow As _Account_txtRow = CType(Me.NewRow,_Account_txtRow)
            Dim columnValuesArray() As Object = New Object() {_Account_, Description, Status}
            row_Account_txtRow.ItemArray = columnValuesArray
            Me.Rows.Add(row_Account_txtRow)
            Return row_Account_txtRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As _Account_txtDataTable = CType(MyBase.Clone,_Account_txtDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New _Account_txtDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me._columnAccount_ = MyBase.Columns("Account#")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnStatus = MyBase.Columns("Status")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me._columnAccount_ = New Global.System.Data.DataColumn("Account#", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnAccount_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnAccount_")
            Me._columnAccount_.ExtendedProperties.Add("Generator_UserColumnName", "Account#")
            MyBase.Columns.Add(Me._columnAccount_)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me._columnAccount_.MaxLength = 80
            Me.columnDescription.MaxLength = 80
            Me.ExtendedProperties.Add("Generator_TableVarName", "_tableAccount_txt")
            Me.ExtendedProperties.Add("Generator_UserTableName", "Account.txt")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function New_Account_txtRow() As _Account_txtRow
            Return CType(Me.NewRow,_Account_txtRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New _Account_txtRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(_Account_txtRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._Account_txtRowChangedEvent) Is Nothing) Then
                RaiseEvent _Account_txtRowChanged(Me, New _Account_txtRowChangeEvent(CType(e.Row,_Account_txtRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._Account_txtRowChangingEvent) Is Nothing) Then
                RaiseEvent _Account_txtRowChanging(Me, New _Account_txtRowChangeEvent(CType(e.Row,_Account_txtRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._Account_txtRowDeletedEvent) Is Nothing) Then
                RaiseEvent _Account_txtRowDeleted(Me, New _Account_txtRowChangeEvent(CType(e.Row,_Account_txtRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._Account_txtRowDeletingEvent) Is Nothing) Then
                RaiseEvent _Account_txtRowDeleting(Me, New _Account_txtRowChangeEvent(CType(e.Row,_Account_txtRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Remove_Account_txtRow(ByVal row As _Account_txtRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsGuardian = New dsGuardian
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "_Account_txtDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class _Supplier_txtDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNum As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnAddr1 As Global.System.Data.DataColumn
        
        Private columnAddr2 As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnStateProv As Global.System.Data.DataColumn
        
        Private columnCountry As Global.System.Data.DataColumn
        
        Private columnZipPC As Global.System.Data.DataColumn
        
        Private columnPhone As Global.System.Data.DataColumn
        
        Private columnFax As Global.System.Data.DataColumn
        
        Private columnContact As Global.System.Data.DataColumn
        
        Private columnManager As Global.System.Data.DataColumn
        
        Private columnTerms As Global.System.Data.DataColumn
        
        Private columnCurrency_Code As Global.System.Data.DataColumn
        
        Private columnCredit_Limit As Global.System.Data.DataColumn
        
        Private columnProtocol As Global.System.Data.DataColumn
        
        Private columnDefault_Tax_Profile As Global.System.Data.DataColumn
        
        Private columnBillAddr1 As Global.System.Data.DataColumn
        
        Private columnBillAddr2 As Global.System.Data.DataColumn
        
        Private columnBillCity As Global.System.Data.DataColumn
        
        Private columnBillStatProv As Global.System.Data.DataColumn
        
        Private columnBillPC As Global.System.Data.DataColumn
        
        Private columnBillCountry As Global.System.Data.DataColumn
        
        Private columnTaxNum As Global.System.Data.DataColumn
        
        Private columnAPAccount As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnWWW As Global.System.Data.DataColumn
        
        Private columnNotes As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Supplier.txt"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Addr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Addr2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateProvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStateProv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipPCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZipPC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ManagerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManager
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TermsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTerms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Currency_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrency_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Credit_LimitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCredit_Limit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProtocolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Default_Tax_ProfileColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDefault_Tax_Profile
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillAddr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillAddr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillAddr2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillAddr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillCityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillStatProvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillStatProv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillPCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillPC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillCountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillCountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APAccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPAccount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WWWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWWW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As _Supplier_txtRow
            Get
                Return CType(Me.Rows(index),_Supplier_txtRow)
            End Get
        End Property
        
        Public Event _Supplier_txtRowChanging As _Supplier_txtRowChangeEventHandler
        
        Public Event _Supplier_txtRowChanged As _Supplier_txtRowChangeEventHandler
        
        Public Event _Supplier_txtRowDeleting As _Supplier_txtRowChangeEventHandler
        
        Public Event _Supplier_txtRowDeleted As _Supplier_txtRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Add_Supplier_txtRow(ByVal row As _Supplier_txtRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Add_Supplier_txtRow( _
                    ByVal Num As String,  _
                    ByVal Name As String,  _
                    ByVal Addr1 As String,  _
                    ByVal Addr2 As String,  _
                    ByVal City As String,  _
                    ByVal StateProv As String,  _
                    ByVal Country As String,  _
                    ByVal ZipPC As String,  _
                    ByVal Phone As String,  _
                    ByVal Fax As String,  _
                    ByVal Contact As String,  _
                    ByVal Manager As String,  _
                    ByVal Terms As String,  _
                    ByVal Currency_Code As String,  _
                    ByVal Credit_Limit As Integer,  _
                    ByVal Protocol As String,  _
                    ByVal Default_Tax_Profile As String,  _
                    ByVal BillAddr1 As String,  _
                    ByVal BillAddr2 As String,  _
                    ByVal BillCity As String,  _
                    ByVal BillStatProv As String,  _
                    ByVal BillPC As String,  _
                    ByVal BillCountry As String,  _
                    ByVal TaxNum As String,  _
                    ByVal APAccount As String,  _
                    ByVal Email As String,  _
                    ByVal WWW As String,  _
                    ByVal Notes As String,  _
                    ByVal Status As Short) As _Supplier_txtRow
            Dim row_Supplier_txtRow As _Supplier_txtRow = CType(Me.NewRow,_Supplier_txtRow)
            Dim columnValuesArray() As Object = New Object() {Num, Name, Addr1, Addr2, City, StateProv, Country, ZipPC, Phone, Fax, Contact, Manager, Terms, Currency_Code, Credit_Limit, Protocol, Default_Tax_Profile, BillAddr1, BillAddr2, BillCity, BillStatProv, BillPC, BillCountry, TaxNum, APAccount, Email, WWW, Notes, Status}
            row_Supplier_txtRow.ItemArray = columnValuesArray
            Me.Rows.Add(row_Supplier_txtRow)
            Return row_Supplier_txtRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As _Supplier_txtDataTable = CType(MyBase.Clone,_Supplier_txtDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New _Supplier_txtDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNum = MyBase.Columns("Num")
            Me.columnName = MyBase.Columns("Name")
            Me.columnAddr1 = MyBase.Columns("Addr1")
            Me.columnAddr2 = MyBase.Columns("Addr2")
            Me.columnCity = MyBase.Columns("City")
            Me.columnStateProv = MyBase.Columns("StateProv")
            Me.columnCountry = MyBase.Columns("Country")
            Me.columnZipPC = MyBase.Columns("ZipPC")
            Me.columnPhone = MyBase.Columns("Phone")
            Me.columnFax = MyBase.Columns("Fax")
            Me.columnContact = MyBase.Columns("Contact")
            Me.columnManager = MyBase.Columns("Manager")
            Me.columnTerms = MyBase.Columns("Terms")
            Me.columnCurrency_Code = MyBase.Columns("Currency Code")
            Me.columnCredit_Limit = MyBase.Columns("Credit Limit")
            Me.columnProtocol = MyBase.Columns("Protocol")
            Me.columnDefault_Tax_Profile = MyBase.Columns("Default Tax Profile")
            Me.columnBillAddr1 = MyBase.Columns("BillAddr1")
            Me.columnBillAddr2 = MyBase.Columns("BillAddr2")
            Me.columnBillCity = MyBase.Columns("BillCity")
            Me.columnBillStatProv = MyBase.Columns("BillStatProv")
            Me.columnBillPC = MyBase.Columns("BillPC")
            Me.columnBillCountry = MyBase.Columns("BillCountry")
            Me.columnTaxNum = MyBase.Columns("TaxNum")
            Me.columnAPAccount = MyBase.Columns("APAccount")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnWWW = MyBase.Columns("WWW")
            Me.columnNotes = MyBase.Columns("Notes")
            Me.columnStatus = MyBase.Columns("Status")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNum = New Global.System.Data.DataColumn("Num", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNum)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnAddr1 = New Global.System.Data.DataColumn("Addr1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddr1)
            Me.columnAddr2 = New Global.System.Data.DataColumn("Addr2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddr2)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnStateProv = New Global.System.Data.DataColumn("StateProv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStateProv)
            Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountry)
            Me.columnZipPC = New Global.System.Data.DataColumn("ZipPC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZipPC)
            Me.columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone)
            Me.columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFax)
            Me.columnContact = New Global.System.Data.DataColumn("Contact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContact)
            Me.columnManager = New Global.System.Data.DataColumn("Manager", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManager)
            Me.columnTerms = New Global.System.Data.DataColumn("Terms", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTerms)
            Me.columnCurrency_Code = New Global.System.Data.DataColumn("Currency Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrency_Code)
            Me.columnCredit_Limit = New Global.System.Data.DataColumn("Credit Limit", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCredit_Limit)
            Me.columnProtocol = New Global.System.Data.DataColumn("Protocol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocol)
            Me.columnDefault_Tax_Profile = New Global.System.Data.DataColumn("Default Tax Profile", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDefault_Tax_Profile)
            Me.columnBillAddr1 = New Global.System.Data.DataColumn("BillAddr1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillAddr1)
            Me.columnBillAddr2 = New Global.System.Data.DataColumn("BillAddr2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillAddr2)
            Me.columnBillCity = New Global.System.Data.DataColumn("BillCity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillCity)
            Me.columnBillStatProv = New Global.System.Data.DataColumn("BillStatProv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillStatProv)
            Me.columnBillPC = New Global.System.Data.DataColumn("BillPC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillPC)
            Me.columnBillCountry = New Global.System.Data.DataColumn("BillCountry", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillCountry)
            Me.columnTaxNum = New Global.System.Data.DataColumn("TaxNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxNum)
            Me.columnAPAccount = New Global.System.Data.DataColumn("APAccount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPAccount)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnWWW = New Global.System.Data.DataColumn("WWW", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWWW)
            Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotes)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.ExtendedProperties.Add("Generator_TableVarName", "_tableSupplier_txt")
            Me.ExtendedProperties.Add("Generator_UserTableName", "Supplier.txt")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function New_Supplier_txtRow() As _Supplier_txtRow
            Return CType(Me.NewRow,_Supplier_txtRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New _Supplier_txtRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(_Supplier_txtRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._Supplier_txtRowChangedEvent) Is Nothing) Then
                RaiseEvent _Supplier_txtRowChanged(Me, New _Supplier_txtRowChangeEvent(CType(e.Row,_Supplier_txtRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._Supplier_txtRowChangingEvent) Is Nothing) Then
                RaiseEvent _Supplier_txtRowChanging(Me, New _Supplier_txtRowChangeEvent(CType(e.Row,_Supplier_txtRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._Supplier_txtRowDeletedEvent) Is Nothing) Then
                RaiseEvent _Supplier_txtRowDeleted(Me, New _Supplier_txtRowChangeEvent(CType(e.Row,_Supplier_txtRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._Supplier_txtRowDeletingEvent) Is Nothing) Then
                RaiseEvent _Supplier_txtRowDeleting(Me, New _Supplier_txtRowChangeEvent(CType(e.Row,_Supplier_txtRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Remove_Supplier_txtRow(ByVal row As _Supplier_txtRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsGuardian = New dsGuardian
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "_Supplier_txtDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AP0015DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnVENDORID As Global.System.Data.DataColumn
        
        Private columnSHORTNAME As Global.System.Data.DataColumn
        
        Private columnIDGRP As Global.System.Data.DataColumn
        
        Private columnSWACTV As Global.System.Data.DataColumn
        
        Private columnDATEINAC As Global.System.Data.DataColumn
        
        Private columnDATELASTMN As Global.System.Data.DataColumn
        
        Private columnSWHOLD As Global.System.Data.DataColumn
        
        Private columnDATESTART As Global.System.Data.DataColumn
        
        Private columnIDPPNT As Global.System.Data.DataColumn
        
        Private columnVENDNAME As Global.System.Data.DataColumn
        
        Private columnTEXTSTRE1 As Global.System.Data.DataColumn
        
        Private columnTEXTSTRE2 As Global.System.Data.DataColumn
        
        Private columnTEXTSTRE3 As Global.System.Data.DataColumn
        
        Private columnTEXTSTRE4 As Global.System.Data.DataColumn
        
        Private columnNAMECITY As Global.System.Data.DataColumn
        
        Private columnCODESTTE As Global.System.Data.DataColumn
        
        Private columnCODEPSTL As Global.System.Data.DataColumn
        
        Private columnCODECTRY As Global.System.Data.DataColumn
        
        Private columnNAMECTAC As Global.System.Data.DataColumn
        
        Private columnTEXTPHON1 As Global.System.Data.DataColumn
        
        Private columnTEXTPHON2 As Global.System.Data.DataColumn
        
        Private columnPRIMRMIT As Global.System.Data.DataColumn
        
        Private columnIDACCTSET As Global.System.Data.DataColumn
        
        Private columnCURNCODE As Global.System.Data.DataColumn
        
        Private columnRATETYPE As Global.System.Data.DataColumn
        
        Private columnBANKID As Global.System.Data.DataColumn
        
        Private columnPRTSEPCHKS As Global.System.Data.DataColumn
        
        Private columnDISTSETID As Global.System.Data.DataColumn
        
        Private columnDISTCODE As Global.System.Data.DataColumn
        
        Private columnGLACCNT As Global.System.Data.DataColumn
        
        Private columnTERMSCODE As Global.System.Data.DataColumn
        
        Private columnDUPAMTCODE As Global.System.Data.DataColumn
        
        Private columnDUPDATECD As Global.System.Data.DataColumn
        
        Private columnCODETAXGRP As Global.System.Data.DataColumn
        
        Private columnTAXCLASS1 As Global.System.Data.DataColumn
        
        Private columnTAXCLASS2 As Global.System.Data.DataColumn
        
        Private columnTAXCLASS3 As Global.System.Data.DataColumn
        
        Private columnTAXCLASS4 As Global.System.Data.DataColumn
        
        Private columnTAXCLASS5 As Global.System.Data.DataColumn
        
        Private columnTAXRPTSW As Global.System.Data.DataColumn
        
        Private columnTAXNBR As Global.System.Data.DataColumn
        
        Private columnTAXIDTYPE As Global.System.Data.DataColumn
        
        Private columnCLASID As Global.System.Data.DataColumn
        
        Private columnAMTCRLIMT As Global.System.Data.DataColumn
        
        Private columnAMTBALDUET As Global.System.Data.DataColumn
        
        Private columnAMTBALDUEH As Global.System.Data.DataColumn
        
        Private columnAMTPPDINVT As Global.System.Data.DataColumn
        
        Private columnAMTPPDINVH As Global.System.Data.DataColumn
        
        Private columnDTLASTRVAL As Global.System.Data.DataColumn
        
        Private columnAMTBALLARV As Global.System.Data.DataColumn
        
        Private columnCNTOPENINV As Global.System.Data.DataColumn
        
        Private columnCNTPPDINVC As Global.System.Data.DataColumn
        
        Private columnCNTINVPAID As Global.System.Data.DataColumn
        
        Private columnDAYSTOPAY As Global.System.Data.DataColumn
        
        Private columnDATEINVCHI As Global.System.Data.DataColumn
        
        Private columnDATEBALHI As Global.System.Data.DataColumn
        
        Private columnDATEINVHIL As Global.System.Data.DataColumn
        
        Private columnDATEBALHIL As Global.System.Data.DataColumn
        
        Private columnDATELASTAC As Global.System.Data.DataColumn
        
        Private columnDATELASTIV As Global.System.Data.DataColumn
        
        Private columnDATELASTCR As Global.System.Data.DataColumn
        
        Private columnDATELASTDR As Global.System.Data.DataColumn
        
        Private columnDATELASTPA As Global.System.Data.DataColumn
        
        Private columnDATELASTDI As Global.System.Data.DataColumn
        
        Private columnDATELSTADJ As Global.System.Data.DataColumn
        
        Private columnIDINVCHI As Global.System.Data.DataColumn
        
        Private columnIDINVCHILY As Global.System.Data.DataColumn
        
        Private columnAMTINVHIT As Global.System.Data.DataColumn
        
        Private columnAMTBALHIT As Global.System.Data.DataColumn
        
        Private columnAMTINVHILT As Global.System.Data.DataColumn
        
        Private columnAMTBALHILT As Global.System.Data.DataColumn
        
        Private columnAMTLASTIVT As Global.System.Data.DataColumn
        
        Private columnAMTLASTCRT As Global.System.Data.DataColumn
        
        Private columnAMTLASTDRT As Global.System.Data.DataColumn
        
        Private columnAMTLASTPYT As Global.System.Data.DataColumn
        
        Private columnAMTLASTDIT As Global.System.Data.DataColumn
        
        Private columnAMTLASTADT As Global.System.Data.DataColumn
        
        Private columnAMTINVHIH As Global.System.Data.DataColumn
        
        Private columnAMTBALHIH As Global.System.Data.DataColumn
        
        Private columnAMTINVHILH As Global.System.Data.DataColumn
        
        Private columnAMTBALHILH As Global.System.Data.DataColumn
        
        Private columnAMTLASTIVH As Global.System.Data.DataColumn
        
        Private columnAMTLASTCRH As Global.System.Data.DataColumn
        
        Private columnAMTLASTDRH As Global.System.Data.DataColumn
        
        Private columnAMTLASTPYH As Global.System.Data.DataColumn
        
        Private columnAMTLASTDIH As Global.System.Data.DataColumn
        
        Private columnAMTLASTADH As Global.System.Data.DataColumn
        
        Private columnPAYMCODE As Global.System.Data.DataColumn
        
        Private columnIDTAXREGI1 As Global.System.Data.DataColumn
        
        Private columnIDTAXREGI2 As Global.System.Data.DataColumn
        
        Private columnIDTAXREGI3 As Global.System.Data.DataColumn
        
        Private columnIDTAXREGI4 As Global.System.Data.DataColumn
        
        Private columnIDTAXREGI5 As Global.System.Data.DataColumn
        
        Private columnSWDISTBY As Global.System.Data.DataColumn
        
        Private columnCODECHECK As Global.System.Data.DataColumn
        
        Private columnAVGDAYSPAY As Global.System.Data.DataColumn
        
        Private columnAMTINVPDHC As Global.System.Data.DataColumn
        
        Private columnAMTINVPDTC As Global.System.Data.DataColumn
        
        Private columnCNTNBRCHKS As Global.System.Data.DataColumn
        
        Private columnSWTXINC1 As Global.System.Data.DataColumn
        
        Private columnSWTXINC2 As Global.System.Data.DataColumn
        
        Private columnSWTXINC3 As Global.System.Data.DataColumn
        
        Private columnSWTXINC4 As Global.System.Data.DataColumn
        
        Private columnSWTXINC5 As Global.System.Data.DataColumn
        
        Private columnEMAIL1 As Global.System.Data.DataColumn
        
        Private columnEMAIL2 As Global.System.Data.DataColumn
        
        Private columnWEBSITE As Global.System.Data.DataColumn
        
        Private columnCTACPHONE As Global.System.Data.DataColumn
        
        Private columnCTACFAX As Global.System.Data.DataColumn
        
        Private columnDELMETHOD As Global.System.Data.DataColumn
        
        Private columnRTGPERCENT As Global.System.Data.DataColumn
        
        Private columnRTGDAYS As Global.System.Data.DataColumn
        
        Private columnRTGTERMS As Global.System.Data.DataColumn
        
        Private columnRTGAMTTC As Global.System.Data.DataColumn
        
        Private columnRTGAMTHC As Global.System.Data.DataColumn
        
        Private columnVALUES As Global.System.Data.DataColumn
        
        Private columnPROCESSCMD As Global.System.Data.DataColumn
        
        Private columnNEXTCUID As Global.System.Data.DataColumn
        
        Private columnLEGALNAME As Global.System.Data.DataColumn
        
        Private columnCHK1099AMT As Global.System.Data.DataColumn
        
        Private columnAP0015_Id As Global.System.Data.DataColumn
        
        Private columnAP0015_List_Id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AP0015"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENDORIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENDORID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHORTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHORTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDGRPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDGRP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SWACTVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWACTV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEINACColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEINAC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATELASTMNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATELASTMN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SWHOLDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWHOLD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATESTARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATESTART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDPPNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDPPNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEXTSTRE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEXTSTRE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEXTSTRE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEXTSTRE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEXTSTRE3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEXTSTRE3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEXTSTRE4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEXTSTRE4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAMECITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAMECITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODESTTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODESTTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODEPSTLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODEPSTL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODECTRYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODECTRY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAMECTACColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAMECTAC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEXTPHON1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEXTPHON1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEXTPHON2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEXTPHON2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRIMRMITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRIMRMIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDACCTSETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDACCTSET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURNCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURNCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RATETYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRATETYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BANKIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBANKID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRTSEPCHKSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRTSEPCHKS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISTSETIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISTSETID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISTCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISTCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLACCNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLACCNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TERMSCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTERMSCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DUPAMTCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUPAMTCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DUPDATECDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUPDATECD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODETAXGRPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODETAXGRP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXCLASS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXCLASS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXCLASS2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXCLASS2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXCLASS3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXCLASS3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXCLASS4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXCLASS4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXCLASS5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXCLASS5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXRPTSWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXRPTSW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXNBRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXNBR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXIDTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXIDTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLASIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLASID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTCRLIMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTCRLIMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTBALDUETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTBALDUET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTBALDUEHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTBALDUEH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTPPDINVTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTPPDINVT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTPPDINVHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTPPDINVH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DTLASTRVALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDTLASTRVAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTBALLARVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTBALLARV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CNTOPENINVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNTOPENINV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CNTPPDINVCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNTPPDINVC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CNTINVPAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNTINVPAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DAYSTOPAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDAYSTOPAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEINVCHIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEINVCHI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEBALHIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEBALHI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEINVHILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEINVHIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEBALHILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEBALHIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATELASTACColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATELASTAC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATELASTIVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATELASTIV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATELASTCRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATELASTCR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATELASTDRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATELASTDR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATELASTPAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATELASTPA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATELASTDIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATELASTDI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATELSTADJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATELSTADJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDINVCHIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDINVCHI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDINVCHILYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDINVCHILY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTINVHITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTINVHIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTBALHITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTBALHIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTINVHILTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTINVHILT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTBALHILTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTBALHILT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTLASTIVTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTLASTIVT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTLASTCRTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTLASTCRT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTLASTDRTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTLASTDRT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTLASTPYTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTLASTPYT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTLASTDITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTLASTDIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTLASTADTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTLASTADT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTINVHIHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTINVHIH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTBALHIHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTBALHIH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTINVHILHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTINVHILH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTBALHILHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTBALHILH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTLASTIVHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTLASTIVH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTLASTCRHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTLASTCRH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTLASTDRHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTLASTDRH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTLASTPYHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTLASTPYH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTLASTDIHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTLASTDIH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTLASTADHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTLASTADH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAYMCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAYMCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDTAXREGI1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDTAXREGI1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDTAXREGI2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDTAXREGI2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDTAXREGI3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDTAXREGI3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDTAXREGI4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDTAXREGI4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDTAXREGI5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDTAXREGI5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SWDISTBYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWDISTBY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODECHECKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODECHECK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AVGDAYSPAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAVGDAYSPAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTINVPDHCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTINVPDHC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMTINVPDTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMTINVPDTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CNTNBRCHKSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNTNBRCHKS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SWTXINC1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWTXINC1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SWTXINC2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWTXINC2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SWTXINC3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWTXINC3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SWTXINC4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWTXINC4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SWTXINC5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSWTXINC5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMAIL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMAIL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMAIL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMAIL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WEBSITEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWEBSITE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTACPHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTACPHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTACFAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTACFAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DELMETHODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDELMETHOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RTGPERCENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRTGPERCENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RTGDAYSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRTGDAYS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RTGTERMSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRTGTERMS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RTGAMTTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRTGAMTTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RTGAMTHCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRTGAMTHC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALUESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALUES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCESSCMDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESSCMD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEXTCUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEXTCUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LEGALNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLEGALNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHK1099AMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHK1099AMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AP0015_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAP0015_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AP0015_List_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAP0015_List_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AP0015Row
            Get
                Return CType(Me.Rows(index),AP0015Row)
            End Get
        End Property
        
        Public Event AP0015RowChanging As AP0015RowChangeEventHandler
        
        Public Event AP0015RowChanged As AP0015RowChangeEventHandler
        
        Public Event AP0015RowDeleting As AP0015RowChangeEventHandler
        
        Public Event AP0015RowDeleted As AP0015RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAP0015Row(ByVal row As AP0015Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAP0015Row( _
                    ByVal VENDORID As String,  _
                    ByVal SHORTNAME As String,  _
                    ByVal IDGRP As String,  _
                    ByVal SWACTV As String,  _
                    ByVal DATEINAC As String,  _
                    ByVal DATELASTMN As String,  _
                    ByVal SWHOLD As String,  _
                    ByVal DATESTART As String,  _
                    ByVal IDPPNT As String,  _
                    ByVal VENDNAME As String,  _
                    ByVal TEXTSTRE1 As String,  _
                    ByVal TEXTSTRE2 As String,  _
                    ByVal TEXTSTRE3 As String,  _
                    ByVal TEXTSTRE4 As String,  _
                    ByVal NAMECITY As String,  _
                    ByVal CODESTTE As String,  _
                    ByVal CODEPSTL As String,  _
                    ByVal CODECTRY As String,  _
                    ByVal NAMECTAC As String,  _
                    ByVal TEXTPHON1 As String,  _
                    ByVal TEXTPHON2 As String,  _
                    ByVal PRIMRMIT As String,  _
                    ByVal IDACCTSET As String,  _
                    ByVal CURNCODE As String,  _
                    ByVal RATETYPE As String,  _
                    ByVal BANKID As String,  _
                    ByVal PRTSEPCHKS As String,  _
                    ByVal DISTSETID As String,  _
                    ByVal DISTCODE As String,  _
                    ByVal GLACCNT As String,  _
                    ByVal TERMSCODE As String,  _
                    ByVal DUPAMTCODE As String,  _
                    ByVal DUPDATECD As String,  _
                    ByVal CODETAXGRP As String,  _
                    ByVal TAXCLASS1 As String,  _
                    ByVal TAXCLASS2 As String,  _
                    ByVal TAXCLASS3 As String,  _
                    ByVal TAXCLASS4 As String,  _
                    ByVal TAXCLASS5 As String,  _
                    ByVal TAXRPTSW As String,  _
                    ByVal TAXNBR As String,  _
                    ByVal TAXIDTYPE As String,  _
                    ByVal CLASID As String,  _
                    ByVal AMTCRLIMT As String,  _
                    ByVal AMTBALDUET As String,  _
                    ByVal AMTBALDUEH As String,  _
                    ByVal AMTPPDINVT As String,  _
                    ByVal AMTPPDINVH As String,  _
                    ByVal DTLASTRVAL As String,  _
                    ByVal AMTBALLARV As String,  _
                    ByVal CNTOPENINV As String,  _
                    ByVal CNTPPDINVC As String,  _
                    ByVal CNTINVPAID As String,  _
                    ByVal DAYSTOPAY As String,  _
                    ByVal DATEINVCHI As String,  _
                    ByVal DATEBALHI As String,  _
                    ByVal DATEINVHIL As String,  _
                    ByVal DATEBALHIL As String,  _
                    ByVal DATELASTAC As String,  _
                    ByVal DATELASTIV As String,  _
                    ByVal DATELASTCR As String,  _
                    ByVal DATELASTDR As String,  _
                    ByVal DATELASTPA As String,  _
                    ByVal DATELASTDI As String,  _
                    ByVal DATELSTADJ As String,  _
                    ByVal IDINVCHI As String,  _
                    ByVal IDINVCHILY As String,  _
                    ByVal AMTINVHIT As String,  _
                    ByVal AMTBALHIT As String,  _
                    ByVal AMTINVHILT As String,  _
                    ByVal AMTBALHILT As String,  _
                    ByVal AMTLASTIVT As String,  _
                    ByVal AMTLASTCRT As String,  _
                    ByVal AMTLASTDRT As String,  _
                    ByVal AMTLASTPYT As String,  _
                    ByVal AMTLASTDIT As String,  _
                    ByVal AMTLASTADT As String,  _
                    ByVal AMTINVHIH As String,  _
                    ByVal AMTBALHIH As String,  _
                    ByVal AMTINVHILH As String,  _
                    ByVal AMTBALHILH As String,  _
                    ByVal AMTLASTIVH As String,  _
                    ByVal AMTLASTCRH As String,  _
                    ByVal AMTLASTDRH As String,  _
                    ByVal AMTLASTPYH As String,  _
                    ByVal AMTLASTDIH As String,  _
                    ByVal AMTLASTADH As String,  _
                    ByVal PAYMCODE As String,  _
                    ByVal IDTAXREGI1 As String,  _
                    ByVal IDTAXREGI2 As String,  _
                    ByVal IDTAXREGI3 As String,  _
                    ByVal IDTAXREGI4 As String,  _
                    ByVal IDTAXREGI5 As String,  _
                    ByVal SWDISTBY As String,  _
                    ByVal CODECHECK As String,  _
                    ByVal AVGDAYSPAY As String,  _
                    ByVal AMTINVPDHC As String,  _
                    ByVal AMTINVPDTC As String,  _
                    ByVal CNTNBRCHKS As String,  _
                    ByVal SWTXINC1 As String,  _
                    ByVal SWTXINC2 As String,  _
                    ByVal SWTXINC3 As String,  _
                    ByVal SWTXINC4 As String,  _
                    ByVal SWTXINC5 As String,  _
                    ByVal EMAIL1 As String,  _
                    ByVal EMAIL2 As String,  _
                    ByVal WEBSITE As String,  _
                    ByVal CTACPHONE As String,  _
                    ByVal CTACFAX As String,  _
                    ByVal DELMETHOD As String,  _
                    ByVal RTGPERCENT As String,  _
                    ByVal RTGDAYS As String,  _
                    ByVal RTGTERMS As String,  _
                    ByVal RTGAMTTC As String,  _
                    ByVal RTGAMTHC As String,  _
                    ByVal VALUES As String,  _
                    ByVal PROCESSCMD As String,  _
                    ByVal NEXTCUID As String,  _
                    ByVal LEGALNAME As String,  _
                    ByVal CHK1099AMT As String,  _
                    ByVal AP0015_List_Id As Integer) As AP0015Row
            Dim rowAP0015Row As AP0015Row = CType(Me.NewRow,AP0015Row)
            Dim columnValuesArray() As Object = New Object() {VENDORID, SHORTNAME, IDGRP, SWACTV, DATEINAC, DATELASTMN, SWHOLD, DATESTART, IDPPNT, VENDNAME, TEXTSTRE1, TEXTSTRE2, TEXTSTRE3, TEXTSTRE4, NAMECITY, CODESTTE, CODEPSTL, CODECTRY, NAMECTAC, TEXTPHON1, TEXTPHON2, PRIMRMIT, IDACCTSET, CURNCODE, RATETYPE, BANKID, PRTSEPCHKS, DISTSETID, DISTCODE, GLACCNT, TERMSCODE, DUPAMTCODE, DUPDATECD, CODETAXGRP, TAXCLASS1, TAXCLASS2, TAXCLASS3, TAXCLASS4, TAXCLASS5, TAXRPTSW, TAXNBR, TAXIDTYPE, CLASID, AMTCRLIMT, AMTBALDUET, AMTBALDUEH, AMTPPDINVT, AMTPPDINVH, DTLASTRVAL, AMTBALLARV, CNTOPENINV, CNTPPDINVC, CNTINVPAID, DAYSTOPAY, DATEINVCHI, DATEBALHI, DATEINVHIL, DATEBALHIL, DATELASTAC, DATELASTIV, DATELASTCR, DATELASTDR, DATELASTPA, DATELASTDI, DATELSTADJ, IDINVCHI, IDINVCHILY, AMTINVHIT, AMTBALHIT, AMTINVHILT, AMTBALHILT, AMTLASTIVT, AMTLASTCRT, AMTLASTDRT, AMTLASTPYT, AMTLASTDIT, AMTLASTADT, AMTINVHIH, AMTBALHIH, AMTINVHILH, AMTBALHILH, AMTLASTIVH, AMTLASTCRH, AMTLASTDRH, AMTLASTPYH, AMTLASTDIH, AMTLASTADH, PAYMCODE, IDTAXREGI1, IDTAXREGI2, IDTAXREGI3, IDTAXREGI4, IDTAXREGI5, SWDISTBY, CODECHECK, AVGDAYSPAY, AMTINVPDHC, AMTINVPDTC, CNTNBRCHKS, SWTXINC1, SWTXINC2, SWTXINC3, SWTXINC4, SWTXINC5, EMAIL1, EMAIL2, WEBSITE, CTACPHONE, CTACFAX, DELMETHOD, RTGPERCENT, RTGDAYS, RTGTERMS, RTGAMTTC, RTGAMTHC, VALUES, PROCESSCMD, NEXTCUID, LEGALNAME, CHK1099AMT, Nothing, AP0015_List_Id}
            rowAP0015Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowAP0015Row)
            Return rowAP0015Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAP0015_Id(ByVal AP0015_Id As Integer) As AP0015Row
            Return CType(Me.Rows.Find(New Object() {AP0015_Id}),AP0015Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AP0015DataTable = CType(MyBase.Clone,AP0015DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AP0015DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnVENDORID = MyBase.Columns("VENDORID")
            Me.columnSHORTNAME = MyBase.Columns("SHORTNAME")
            Me.columnIDGRP = MyBase.Columns("IDGRP")
            Me.columnSWACTV = MyBase.Columns("SWACTV")
            Me.columnDATEINAC = MyBase.Columns("DATEINAC")
            Me.columnDATELASTMN = MyBase.Columns("DATELASTMN")
            Me.columnSWHOLD = MyBase.Columns("SWHOLD")
            Me.columnDATESTART = MyBase.Columns("DATESTART")
            Me.columnIDPPNT = MyBase.Columns("IDPPNT")
            Me.columnVENDNAME = MyBase.Columns("VENDNAME")
            Me.columnTEXTSTRE1 = MyBase.Columns("TEXTSTRE1")
            Me.columnTEXTSTRE2 = MyBase.Columns("TEXTSTRE2")
            Me.columnTEXTSTRE3 = MyBase.Columns("TEXTSTRE3")
            Me.columnTEXTSTRE4 = MyBase.Columns("TEXTSTRE4")
            Me.columnNAMECITY = MyBase.Columns("NAMECITY")
            Me.columnCODESTTE = MyBase.Columns("CODESTTE")
            Me.columnCODEPSTL = MyBase.Columns("CODEPSTL")
            Me.columnCODECTRY = MyBase.Columns("CODECTRY")
            Me.columnNAMECTAC = MyBase.Columns("NAMECTAC")
            Me.columnTEXTPHON1 = MyBase.Columns("TEXTPHON1")
            Me.columnTEXTPHON2 = MyBase.Columns("TEXTPHON2")
            Me.columnPRIMRMIT = MyBase.Columns("PRIMRMIT")
            Me.columnIDACCTSET = MyBase.Columns("IDACCTSET")
            Me.columnCURNCODE = MyBase.Columns("CURNCODE")
            Me.columnRATETYPE = MyBase.Columns("RATETYPE")
            Me.columnBANKID = MyBase.Columns("BANKID")
            Me.columnPRTSEPCHKS = MyBase.Columns("PRTSEPCHKS")
            Me.columnDISTSETID = MyBase.Columns("DISTSETID")
            Me.columnDISTCODE = MyBase.Columns("DISTCODE")
            Me.columnGLACCNT = MyBase.Columns("GLACCNT")
            Me.columnTERMSCODE = MyBase.Columns("TERMSCODE")
            Me.columnDUPAMTCODE = MyBase.Columns("DUPAMTCODE")
            Me.columnDUPDATECD = MyBase.Columns("DUPDATECD")
            Me.columnCODETAXGRP = MyBase.Columns("CODETAXGRP")
            Me.columnTAXCLASS1 = MyBase.Columns("TAXCLASS1")
            Me.columnTAXCLASS2 = MyBase.Columns("TAXCLASS2")
            Me.columnTAXCLASS3 = MyBase.Columns("TAXCLASS3")
            Me.columnTAXCLASS4 = MyBase.Columns("TAXCLASS4")
            Me.columnTAXCLASS5 = MyBase.Columns("TAXCLASS5")
            Me.columnTAXRPTSW = MyBase.Columns("TAXRPTSW")
            Me.columnTAXNBR = MyBase.Columns("TAXNBR")
            Me.columnTAXIDTYPE = MyBase.Columns("TAXIDTYPE")
            Me.columnCLASID = MyBase.Columns("CLASID")
            Me.columnAMTCRLIMT = MyBase.Columns("AMTCRLIMT")
            Me.columnAMTBALDUET = MyBase.Columns("AMTBALDUET")
            Me.columnAMTBALDUEH = MyBase.Columns("AMTBALDUEH")
            Me.columnAMTPPDINVT = MyBase.Columns("AMTPPDINVT")
            Me.columnAMTPPDINVH = MyBase.Columns("AMTPPDINVH")
            Me.columnDTLASTRVAL = MyBase.Columns("DTLASTRVAL")
            Me.columnAMTBALLARV = MyBase.Columns("AMTBALLARV")
            Me.columnCNTOPENINV = MyBase.Columns("CNTOPENINV")
            Me.columnCNTPPDINVC = MyBase.Columns("CNTPPDINVC")
            Me.columnCNTINVPAID = MyBase.Columns("CNTINVPAID")
            Me.columnDAYSTOPAY = MyBase.Columns("DAYSTOPAY")
            Me.columnDATEINVCHI = MyBase.Columns("DATEINVCHI")
            Me.columnDATEBALHI = MyBase.Columns("DATEBALHI")
            Me.columnDATEINVHIL = MyBase.Columns("DATEINVHIL")
            Me.columnDATEBALHIL = MyBase.Columns("DATEBALHIL")
            Me.columnDATELASTAC = MyBase.Columns("DATELASTAC")
            Me.columnDATELASTIV = MyBase.Columns("DATELASTIV")
            Me.columnDATELASTCR = MyBase.Columns("DATELASTCR")
            Me.columnDATELASTDR = MyBase.Columns("DATELASTDR")
            Me.columnDATELASTPA = MyBase.Columns("DATELASTPA")
            Me.columnDATELASTDI = MyBase.Columns("DATELASTDI")
            Me.columnDATELSTADJ = MyBase.Columns("DATELSTADJ")
            Me.columnIDINVCHI = MyBase.Columns("IDINVCHI")
            Me.columnIDINVCHILY = MyBase.Columns("IDINVCHILY")
            Me.columnAMTINVHIT = MyBase.Columns("AMTINVHIT")
            Me.columnAMTBALHIT = MyBase.Columns("AMTBALHIT")
            Me.columnAMTINVHILT = MyBase.Columns("AMTINVHILT")
            Me.columnAMTBALHILT = MyBase.Columns("AMTBALHILT")
            Me.columnAMTLASTIVT = MyBase.Columns("AMTLASTIVT")
            Me.columnAMTLASTCRT = MyBase.Columns("AMTLASTCRT")
            Me.columnAMTLASTDRT = MyBase.Columns("AMTLASTDRT")
            Me.columnAMTLASTPYT = MyBase.Columns("AMTLASTPYT")
            Me.columnAMTLASTDIT = MyBase.Columns("AMTLASTDIT")
            Me.columnAMTLASTADT = MyBase.Columns("AMTLASTADT")
            Me.columnAMTINVHIH = MyBase.Columns("AMTINVHIH")
            Me.columnAMTBALHIH = MyBase.Columns("AMTBALHIH")
            Me.columnAMTINVHILH = MyBase.Columns("AMTINVHILH")
            Me.columnAMTBALHILH = MyBase.Columns("AMTBALHILH")
            Me.columnAMTLASTIVH = MyBase.Columns("AMTLASTIVH")
            Me.columnAMTLASTCRH = MyBase.Columns("AMTLASTCRH")
            Me.columnAMTLASTDRH = MyBase.Columns("AMTLASTDRH")
            Me.columnAMTLASTPYH = MyBase.Columns("AMTLASTPYH")
            Me.columnAMTLASTDIH = MyBase.Columns("AMTLASTDIH")
            Me.columnAMTLASTADH = MyBase.Columns("AMTLASTADH")
            Me.columnPAYMCODE = MyBase.Columns("PAYMCODE")
            Me.columnIDTAXREGI1 = MyBase.Columns("IDTAXREGI1")
            Me.columnIDTAXREGI2 = MyBase.Columns("IDTAXREGI2")
            Me.columnIDTAXREGI3 = MyBase.Columns("IDTAXREGI3")
            Me.columnIDTAXREGI4 = MyBase.Columns("IDTAXREGI4")
            Me.columnIDTAXREGI5 = MyBase.Columns("IDTAXREGI5")
            Me.columnSWDISTBY = MyBase.Columns("SWDISTBY")
            Me.columnCODECHECK = MyBase.Columns("CODECHECK")
            Me.columnAVGDAYSPAY = MyBase.Columns("AVGDAYSPAY")
            Me.columnAMTINVPDHC = MyBase.Columns("AMTINVPDHC")
            Me.columnAMTINVPDTC = MyBase.Columns("AMTINVPDTC")
            Me.columnCNTNBRCHKS = MyBase.Columns("CNTNBRCHKS")
            Me.columnSWTXINC1 = MyBase.Columns("SWTXINC1")
            Me.columnSWTXINC2 = MyBase.Columns("SWTXINC2")
            Me.columnSWTXINC3 = MyBase.Columns("SWTXINC3")
            Me.columnSWTXINC4 = MyBase.Columns("SWTXINC4")
            Me.columnSWTXINC5 = MyBase.Columns("SWTXINC5")
            Me.columnEMAIL1 = MyBase.Columns("EMAIL1")
            Me.columnEMAIL2 = MyBase.Columns("EMAIL2")
            Me.columnWEBSITE = MyBase.Columns("WEBSITE")
            Me.columnCTACPHONE = MyBase.Columns("CTACPHONE")
            Me.columnCTACFAX = MyBase.Columns("CTACFAX")
            Me.columnDELMETHOD = MyBase.Columns("DELMETHOD")
            Me.columnRTGPERCENT = MyBase.Columns("RTGPERCENT")
            Me.columnRTGDAYS = MyBase.Columns("RTGDAYS")
            Me.columnRTGTERMS = MyBase.Columns("RTGTERMS")
            Me.columnRTGAMTTC = MyBase.Columns("RTGAMTTC")
            Me.columnRTGAMTHC = MyBase.Columns("RTGAMTHC")
            Me.columnVALUES = MyBase.Columns("VALUES")
            Me.columnPROCESSCMD = MyBase.Columns("PROCESSCMD")
            Me.columnNEXTCUID = MyBase.Columns("NEXTCUID")
            Me.columnLEGALNAME = MyBase.Columns("LEGALNAME")
            Me.columnCHK1099AMT = MyBase.Columns("CHK1099AMT")
            Me.columnAP0015_Id = MyBase.Columns("AP0015_Id")
            Me.columnAP0015_List_Id = MyBase.Columns("AP0015_List_Id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnVENDORID = New Global.System.Data.DataColumn("VENDORID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENDORID)
            Me.columnSHORTNAME = New Global.System.Data.DataColumn("SHORTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHORTNAME)
            Me.columnIDGRP = New Global.System.Data.DataColumn("IDGRP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDGRP)
            Me.columnSWACTV = New Global.System.Data.DataColumn("SWACTV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWACTV)
            Me.columnDATEINAC = New Global.System.Data.DataColumn("DATEINAC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEINAC)
            Me.columnDATELASTMN = New Global.System.Data.DataColumn("DATELASTMN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATELASTMN)
            Me.columnSWHOLD = New Global.System.Data.DataColumn("SWHOLD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWHOLD)
            Me.columnDATESTART = New Global.System.Data.DataColumn("DATESTART", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATESTART)
            Me.columnIDPPNT = New Global.System.Data.DataColumn("IDPPNT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDPPNT)
            Me.columnVENDNAME = New Global.System.Data.DataColumn("VENDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENDNAME)
            Me.columnTEXTSTRE1 = New Global.System.Data.DataColumn("TEXTSTRE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEXTSTRE1)
            Me.columnTEXTSTRE2 = New Global.System.Data.DataColumn("TEXTSTRE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEXTSTRE2)
            Me.columnTEXTSTRE3 = New Global.System.Data.DataColumn("TEXTSTRE3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEXTSTRE3)
            Me.columnTEXTSTRE4 = New Global.System.Data.DataColumn("TEXTSTRE4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEXTSTRE4)
            Me.columnNAMECITY = New Global.System.Data.DataColumn("NAMECITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAMECITY)
            Me.columnCODESTTE = New Global.System.Data.DataColumn("CODESTTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODESTTE)
            Me.columnCODEPSTL = New Global.System.Data.DataColumn("CODEPSTL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODEPSTL)
            Me.columnCODECTRY = New Global.System.Data.DataColumn("CODECTRY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODECTRY)
            Me.columnNAMECTAC = New Global.System.Data.DataColumn("NAMECTAC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAMECTAC)
            Me.columnTEXTPHON1 = New Global.System.Data.DataColumn("TEXTPHON1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEXTPHON1)
            Me.columnTEXTPHON2 = New Global.System.Data.DataColumn("TEXTPHON2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEXTPHON2)
            Me.columnPRIMRMIT = New Global.System.Data.DataColumn("PRIMRMIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIMRMIT)
            Me.columnIDACCTSET = New Global.System.Data.DataColumn("IDACCTSET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDACCTSET)
            Me.columnCURNCODE = New Global.System.Data.DataColumn("CURNCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURNCODE)
            Me.columnRATETYPE = New Global.System.Data.DataColumn("RATETYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRATETYPE)
            Me.columnBANKID = New Global.System.Data.DataColumn("BANKID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANKID)
            Me.columnPRTSEPCHKS = New Global.System.Data.DataColumn("PRTSEPCHKS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRTSEPCHKS)
            Me.columnDISTSETID = New Global.System.Data.DataColumn("DISTSETID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISTSETID)
            Me.columnDISTCODE = New Global.System.Data.DataColumn("DISTCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISTCODE)
            Me.columnGLACCNT = New Global.System.Data.DataColumn("GLACCNT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLACCNT)
            Me.columnTERMSCODE = New Global.System.Data.DataColumn("TERMSCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTERMSCODE)
            Me.columnDUPAMTCODE = New Global.System.Data.DataColumn("DUPAMTCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUPAMTCODE)
            Me.columnDUPDATECD = New Global.System.Data.DataColumn("DUPDATECD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUPDATECD)
            Me.columnCODETAXGRP = New Global.System.Data.DataColumn("CODETAXGRP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODETAXGRP)
            Me.columnTAXCLASS1 = New Global.System.Data.DataColumn("TAXCLASS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXCLASS1)
            Me.columnTAXCLASS2 = New Global.System.Data.DataColumn("TAXCLASS2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXCLASS2)
            Me.columnTAXCLASS3 = New Global.System.Data.DataColumn("TAXCLASS3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXCLASS3)
            Me.columnTAXCLASS4 = New Global.System.Data.DataColumn("TAXCLASS4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXCLASS4)
            Me.columnTAXCLASS5 = New Global.System.Data.DataColumn("TAXCLASS5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXCLASS5)
            Me.columnTAXRPTSW = New Global.System.Data.DataColumn("TAXRPTSW", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXRPTSW)
            Me.columnTAXNBR = New Global.System.Data.DataColumn("TAXNBR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXNBR)
            Me.columnTAXIDTYPE = New Global.System.Data.DataColumn("TAXIDTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXIDTYPE)
            Me.columnCLASID = New Global.System.Data.DataColumn("CLASID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLASID)
            Me.columnAMTCRLIMT = New Global.System.Data.DataColumn("AMTCRLIMT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTCRLIMT)
            Me.columnAMTBALDUET = New Global.System.Data.DataColumn("AMTBALDUET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTBALDUET)
            Me.columnAMTBALDUEH = New Global.System.Data.DataColumn("AMTBALDUEH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTBALDUEH)
            Me.columnAMTPPDINVT = New Global.System.Data.DataColumn("AMTPPDINVT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTPPDINVT)
            Me.columnAMTPPDINVH = New Global.System.Data.DataColumn("AMTPPDINVH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTPPDINVH)
            Me.columnDTLASTRVAL = New Global.System.Data.DataColumn("DTLASTRVAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDTLASTRVAL)
            Me.columnAMTBALLARV = New Global.System.Data.DataColumn("AMTBALLARV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTBALLARV)
            Me.columnCNTOPENINV = New Global.System.Data.DataColumn("CNTOPENINV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNTOPENINV)
            Me.columnCNTPPDINVC = New Global.System.Data.DataColumn("CNTPPDINVC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNTPPDINVC)
            Me.columnCNTINVPAID = New Global.System.Data.DataColumn("CNTINVPAID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNTINVPAID)
            Me.columnDAYSTOPAY = New Global.System.Data.DataColumn("DAYSTOPAY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDAYSTOPAY)
            Me.columnDATEINVCHI = New Global.System.Data.DataColumn("DATEINVCHI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEINVCHI)
            Me.columnDATEBALHI = New Global.System.Data.DataColumn("DATEBALHI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEBALHI)
            Me.columnDATEINVHIL = New Global.System.Data.DataColumn("DATEINVHIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEINVHIL)
            Me.columnDATEBALHIL = New Global.System.Data.DataColumn("DATEBALHIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEBALHIL)
            Me.columnDATELASTAC = New Global.System.Data.DataColumn("DATELASTAC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATELASTAC)
            Me.columnDATELASTIV = New Global.System.Data.DataColumn("DATELASTIV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATELASTIV)
            Me.columnDATELASTCR = New Global.System.Data.DataColumn("DATELASTCR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATELASTCR)
            Me.columnDATELASTDR = New Global.System.Data.DataColumn("DATELASTDR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATELASTDR)
            Me.columnDATELASTPA = New Global.System.Data.DataColumn("DATELASTPA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATELASTPA)
            Me.columnDATELASTDI = New Global.System.Data.DataColumn("DATELASTDI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATELASTDI)
            Me.columnDATELSTADJ = New Global.System.Data.DataColumn("DATELSTADJ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATELSTADJ)
            Me.columnIDINVCHI = New Global.System.Data.DataColumn("IDINVCHI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDINVCHI)
            Me.columnIDINVCHILY = New Global.System.Data.DataColumn("IDINVCHILY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDINVCHILY)
            Me.columnAMTINVHIT = New Global.System.Data.DataColumn("AMTINVHIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTINVHIT)
            Me.columnAMTBALHIT = New Global.System.Data.DataColumn("AMTBALHIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTBALHIT)
            Me.columnAMTINVHILT = New Global.System.Data.DataColumn("AMTINVHILT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTINVHILT)
            Me.columnAMTBALHILT = New Global.System.Data.DataColumn("AMTBALHILT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTBALHILT)
            Me.columnAMTLASTIVT = New Global.System.Data.DataColumn("AMTLASTIVT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTLASTIVT)
            Me.columnAMTLASTCRT = New Global.System.Data.DataColumn("AMTLASTCRT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTLASTCRT)
            Me.columnAMTLASTDRT = New Global.System.Data.DataColumn("AMTLASTDRT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTLASTDRT)
            Me.columnAMTLASTPYT = New Global.System.Data.DataColumn("AMTLASTPYT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTLASTPYT)
            Me.columnAMTLASTDIT = New Global.System.Data.DataColumn("AMTLASTDIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTLASTDIT)
            Me.columnAMTLASTADT = New Global.System.Data.DataColumn("AMTLASTADT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTLASTADT)
            Me.columnAMTINVHIH = New Global.System.Data.DataColumn("AMTINVHIH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTINVHIH)
            Me.columnAMTBALHIH = New Global.System.Data.DataColumn("AMTBALHIH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTBALHIH)
            Me.columnAMTINVHILH = New Global.System.Data.DataColumn("AMTINVHILH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTINVHILH)
            Me.columnAMTBALHILH = New Global.System.Data.DataColumn("AMTBALHILH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTBALHILH)
            Me.columnAMTLASTIVH = New Global.System.Data.DataColumn("AMTLASTIVH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTLASTIVH)
            Me.columnAMTLASTCRH = New Global.System.Data.DataColumn("AMTLASTCRH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTLASTCRH)
            Me.columnAMTLASTDRH = New Global.System.Data.DataColumn("AMTLASTDRH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTLASTDRH)
            Me.columnAMTLASTPYH = New Global.System.Data.DataColumn("AMTLASTPYH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTLASTPYH)
            Me.columnAMTLASTDIH = New Global.System.Data.DataColumn("AMTLASTDIH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTLASTDIH)
            Me.columnAMTLASTADH = New Global.System.Data.DataColumn("AMTLASTADH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTLASTADH)
            Me.columnPAYMCODE = New Global.System.Data.DataColumn("PAYMCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAYMCODE)
            Me.columnIDTAXREGI1 = New Global.System.Data.DataColumn("IDTAXREGI1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDTAXREGI1)
            Me.columnIDTAXREGI2 = New Global.System.Data.DataColumn("IDTAXREGI2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDTAXREGI2)
            Me.columnIDTAXREGI3 = New Global.System.Data.DataColumn("IDTAXREGI3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDTAXREGI3)
            Me.columnIDTAXREGI4 = New Global.System.Data.DataColumn("IDTAXREGI4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDTAXREGI4)
            Me.columnIDTAXREGI5 = New Global.System.Data.DataColumn("IDTAXREGI5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDTAXREGI5)
            Me.columnSWDISTBY = New Global.System.Data.DataColumn("SWDISTBY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWDISTBY)
            Me.columnCODECHECK = New Global.System.Data.DataColumn("CODECHECK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODECHECK)
            Me.columnAVGDAYSPAY = New Global.System.Data.DataColumn("AVGDAYSPAY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAVGDAYSPAY)
            Me.columnAMTINVPDHC = New Global.System.Data.DataColumn("AMTINVPDHC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTINVPDHC)
            Me.columnAMTINVPDTC = New Global.System.Data.DataColumn("AMTINVPDTC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMTINVPDTC)
            Me.columnCNTNBRCHKS = New Global.System.Data.DataColumn("CNTNBRCHKS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNTNBRCHKS)
            Me.columnSWTXINC1 = New Global.System.Data.DataColumn("SWTXINC1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWTXINC1)
            Me.columnSWTXINC2 = New Global.System.Data.DataColumn("SWTXINC2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWTXINC2)
            Me.columnSWTXINC3 = New Global.System.Data.DataColumn("SWTXINC3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWTXINC3)
            Me.columnSWTXINC4 = New Global.System.Data.DataColumn("SWTXINC4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWTXINC4)
            Me.columnSWTXINC5 = New Global.System.Data.DataColumn("SWTXINC5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSWTXINC5)
            Me.columnEMAIL1 = New Global.System.Data.DataColumn("EMAIL1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMAIL1)
            Me.columnEMAIL2 = New Global.System.Data.DataColumn("EMAIL2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMAIL2)
            Me.columnWEBSITE = New Global.System.Data.DataColumn("WEBSITE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWEBSITE)
            Me.columnCTACPHONE = New Global.System.Data.DataColumn("CTACPHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTACPHONE)
            Me.columnCTACFAX = New Global.System.Data.DataColumn("CTACFAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTACFAX)
            Me.columnDELMETHOD = New Global.System.Data.DataColumn("DELMETHOD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDELMETHOD)
            Me.columnRTGPERCENT = New Global.System.Data.DataColumn("RTGPERCENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRTGPERCENT)
            Me.columnRTGDAYS = New Global.System.Data.DataColumn("RTGDAYS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRTGDAYS)
            Me.columnRTGTERMS = New Global.System.Data.DataColumn("RTGTERMS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRTGTERMS)
            Me.columnRTGAMTTC = New Global.System.Data.DataColumn("RTGAMTTC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRTGAMTTC)
            Me.columnRTGAMTHC = New Global.System.Data.DataColumn("RTGAMTHC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRTGAMTHC)
            Me.columnVALUES = New Global.System.Data.DataColumn("VALUES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALUES)
            Me.columnPROCESSCMD = New Global.System.Data.DataColumn("PROCESSCMD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESSCMD)
            Me.columnNEXTCUID = New Global.System.Data.DataColumn("NEXTCUID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEXTCUID)
            Me.columnLEGALNAME = New Global.System.Data.DataColumn("LEGALNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLEGALNAME)
            Me.columnCHK1099AMT = New Global.System.Data.DataColumn("CHK1099AMT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHK1099AMT)
            Me.columnAP0015_Id = New Global.System.Data.DataColumn("AP0015_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnAP0015_Id)
            Me.columnAP0015_List_Id = New Global.System.Data.DataColumn("AP0015_List_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnAP0015_List_Id)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnAP0015_Id}, true))
            Me.columnAP0015_Id.AutoIncrement = true
            Me.columnAP0015_Id.AllowDBNull = false
            Me.columnAP0015_Id.Unique = true
            Me.columnAP0015_Id.Namespace = ""
            Me.columnAP0015_List_Id.Namespace = ""
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAP0015Row() As AP0015Row
            Return CType(Me.NewRow,AP0015Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AP0015Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AP0015Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AP0015RowChangedEvent) Is Nothing) Then
                RaiseEvent AP0015RowChanged(Me, New AP0015RowChangeEvent(CType(e.Row,AP0015Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AP0015RowChangingEvent) Is Nothing) Then
                RaiseEvent AP0015RowChanging(Me, New AP0015RowChangeEvent(CType(e.Row,AP0015Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AP0015RowDeletedEvent) Is Nothing) Then
                RaiseEvent AP0015RowDeleted(Me, New AP0015RowChangeEvent(CType(e.Row,AP0015Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AP0015RowDeletingEvent) Is Nothing) Then
                RaiseEvent AP0015RowDeleting(Me, New AP0015RowChangeEvent(CType(e.Row,AP0015Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAP0015Row(ByVal row As AP0015Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsGuardian = New dsGuardian
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AP0015DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TermsMatchingDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTERMSCODE As Global.System.Data.DataColumn
        
        Private columnTerms As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TermsMatching"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TERMSCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTERMSCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TermsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTerms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TermsMatchingRow
            Get
                Return CType(Me.Rows(index),TermsMatchingRow)
            End Get
        End Property
        
        Public Event TermsMatchingRowChanging As TermsMatchingRowChangeEventHandler
        
        Public Event TermsMatchingRowChanged As TermsMatchingRowChangeEventHandler
        
        Public Event TermsMatchingRowDeleting As TermsMatchingRowChangeEventHandler
        
        Public Event TermsMatchingRowDeleted As TermsMatchingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTermsMatchingRow(ByVal row As TermsMatchingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTermsMatchingRow(ByVal TERMSCODE As String, ByVal Terms As String) As TermsMatchingRow
            Dim rowTermsMatchingRow As TermsMatchingRow = CType(Me.NewRow,TermsMatchingRow)
            Dim columnValuesArray() As Object = New Object() {TERMSCODE, Terms}
            rowTermsMatchingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTermsMatchingRow)
            Return rowTermsMatchingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTerms(ByVal Terms As String) As TermsMatchingRow
            Return CType(Me.Rows.Find(New Object() {Terms}),TermsMatchingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TermsMatchingDataTable = CType(MyBase.Clone,TermsMatchingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TermsMatchingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTERMSCODE = MyBase.Columns("TERMSCODE")
            Me.columnTerms = MyBase.Columns("Terms")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTERMSCODE = New Global.System.Data.DataColumn("TERMSCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTERMSCODE)
            Me.columnTerms = New Global.System.Data.DataColumn("Terms", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTerms)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTerms}, true))
            Me.columnTerms.AllowDBNull = false
            Me.columnTerms.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTermsMatchingRow() As TermsMatchingRow
            Return CType(Me.NewRow,TermsMatchingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TermsMatchingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TermsMatchingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TermsMatchingRowChangedEvent) Is Nothing) Then
                RaiseEvent TermsMatchingRowChanged(Me, New TermsMatchingRowChangeEvent(CType(e.Row,TermsMatchingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TermsMatchingRowChangingEvent) Is Nothing) Then
                RaiseEvent TermsMatchingRowChanging(Me, New TermsMatchingRowChangeEvent(CType(e.Row,TermsMatchingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TermsMatchingRowDeletedEvent) Is Nothing) Then
                RaiseEvent TermsMatchingRowDeleted(Me, New TermsMatchingRowChangeEvent(CType(e.Row,TermsMatchingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TermsMatchingRowDeletingEvent) Is Nothing) Then
                RaiseEvent TermsMatchingRowDeleting(Me, New TermsMatchingRowChangeEvent(CType(e.Row,TermsMatchingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTermsMatchingRow(ByVal row As TermsMatchingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsGuardian = New dsGuardian
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TermsMatchingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class APTransExport1Row
        Inherits Global.System.Data.DataRow
        
        Private tableAPTransExport1 As APTransExport1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAPTransExport1 = CType(Me.Table,APTransExport1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceNumber() As String
            Get
                Return CType(Me(Me.tableAPTransExport1.InvoiceNumberColumn),String)
            End Get
            Set
                Me(Me.tableAPTransExport1.InvoiceNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocumentType() As String
            Get
                If Me.IsDocumentTypeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport1.DocumentTypeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport1.DocumentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocDate() As String
            Get
                If Me.IsDocDateNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport1.DocDateColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport1.DocDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BatchNumber() As String
            Get
                If Me.IsBatchNumberNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport1.BatchNumberColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport1.BatchNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VendorID() As String
            Get
                If Me.IsVendorIDNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport1.VendorIDColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport1.VendorIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Terms() As String
            Get
                If Me.IsTermsNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport1.TermsColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport1.TermsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrencyID() As String
            Get
                If Me.IsCurrencyIDNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport1.CurrencyIDColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport1.CurrencyIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrRate() As String
            Get
                If Me.IsCurrRateNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport1.CurrRateColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport1.CurrRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurchaseAmount() As String
            Get
                If Me.IsPurchaseAmountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport1.PurchaseAmountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport1.PurchaseAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FreightAmount() As String
            Get
                If Me.IsFreightAmountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport1.FreightAmountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport1.FreightAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiscAmount() As String
            Get
                If Me.IsMiscAmountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport1.MiscAmountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport1.MiscAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxAmount() As String
            Get
                If Me.IsTaxAmountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport1.TaxAmountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport1.TaxAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PostDate() As String
            Get
                If Me.IsPostDateNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport1.PostDateColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport1.PostDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocumentTypeNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport1.DocumentTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocumentTypeNull()
            Me(Me.tableAPTransExport1.DocumentTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocDateNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport1.DocDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocDateNull()
            Me(Me.tableAPTransExport1.DocDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBatchNumberNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport1.BatchNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBatchNumberNull()
            Me(Me.tableAPTransExport1.BatchNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendorIDNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport1.VendorIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendorIDNull()
            Me(Me.tableAPTransExport1.VendorIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTermsNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport1.TermsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTermsNull()
            Me(Me.tableAPTransExport1.TermsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrencyIDNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport1.CurrencyIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrencyIDNull()
            Me(Me.tableAPTransExport1.CurrencyIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrRateNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport1.CurrRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrRateNull()
            Me(Me.tableAPTransExport1.CurrRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurchaseAmountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport1.PurchaseAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurchaseAmountNull()
            Me(Me.tableAPTransExport1.PurchaseAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFreightAmountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport1.FreightAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFreightAmountNull()
            Me(Me.tableAPTransExport1.FreightAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiscAmountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport1.MiscAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiscAmountNull()
            Me(Me.tableAPTransExport1.MiscAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxAmountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport1.TaxAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxAmountNull()
            Me(Me.tableAPTransExport1.TaxAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPostDateNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport1.PostDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPostDateNull()
            Me(Me.tableAPTransExport1.PostDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetAPTransExport2Rows() As APTransExport2Row()
            If (Me.Table.ChildRelations("APTransExport1_APTransExport2") Is Nothing) Then
                Return New APTransExport2Row(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("APTransExport1_APTransExport2")),APTransExport2Row())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class APTransExport2Row
        Inherits Global.System.Data.DataRow
        
        Private tableAPTransExport2 As APTransExport2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAPTransExport2 = CType(Me.Table,APTransExport2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceNumber() As String
            Get
                If Me.IsInvoiceNumberNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.InvoiceNumberColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.InvoiceNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PONumber() As String
            Get
                If Me.IsPONumberNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.PONumberColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.PONumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POLineNum() As String
            Get
                If Me.IsPOLineNumNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.POLineNumColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.POLineNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateReceived() As String
            Get
                If Me.IsDateReceivedNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.DateReceivedColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.DateReceivedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LineDescription() As String
            Get
                If Me.IsLineDescriptionNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.LineDescriptionColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.LineDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DistributionType() As String
            Get
                If Me.IsDistributionTypeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.DistributionTypeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.DistributionTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AccountNum() As String
            Get
                If Me.IsAccountNumNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.AccountNumColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.AccountNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Debit() As String
            Get
                If Me.IsDebitNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.DebitColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.DebitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Credit() As String
            Get
                If Me.IsCreditNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.CreditColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.CreditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxCode() As String
            Get
                If Me.IsTaxCodeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.TaxCodeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.TaxCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As String
            Get
                If Me.IsQtyNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.QtyColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitPrice() As String
            Get
                If Me.IsUnitPriceNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.UnitPriceColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.UnitPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsReversal() As String
            Get
                If Me.IsIsReversalNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.IsReversalColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.IsReversalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax1Amount() As String
            Get
                If Me.IsTax1AmountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.Tax1AmountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.Tax1AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax1Account() As String
            Get
                If Me.IsTax1AccountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.Tax1AccountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.Tax1AccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax1HoldAccount() As String
            Get
                If Me.IsTax1HoldAccountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.Tax1HoldAccountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.Tax1HoldAccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax2Amount() As String
            Get
                If Me.IsTax2AmountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.Tax2AmountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.Tax2AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax2Account() As String
            Get
                If Me.IsTax2AccountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.Tax2AccountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.Tax2AccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax2HoldAccount() As String
            Get
                If Me.IsTax2HoldAccountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.Tax2HoldAccountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.Tax2HoldAccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax3Amount() As String
            Get
                If Me.IsTax3AmountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.Tax3AmountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.Tax3AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax3Account() As String
            Get
                If Me.IsTax3AccountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.Tax3AccountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.Tax3AccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax3HoldAccount() As String
            Get
                If Me.IsTax3HoldAccountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.Tax3HoldAccountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.Tax3HoldAccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax4Amount() As String
            Get
                If Me.IsTax4AmountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.Tax4AmountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.Tax4AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax4Account() As String
            Get
                If Me.IsTax4AccountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.Tax4AccountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.Tax4AccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tax4HoldAccount() As String
            Get
                If Me.IsTax4HoldAccountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.Tax4HoldAccountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.Tax4HoldAccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG1() As String
            Get
                If Me.IsSEG1Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.SEG1Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.SEG1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG2() As String
            Get
                If Me.IsSEG2Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.SEG2Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.SEG2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG3() As String
            Get
                If Me.IsSEG3Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.SEG3Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.SEG3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG4() As String
            Get
                If Me.IsSEG4Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.SEG4Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.SEG4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG5() As String
            Get
                If Me.IsSEG5Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.SEG5Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.SEG5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG6() As String
            Get
                If Me.IsSEG6Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.SEG6Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.SEG6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG7() As String
            Get
                If Me.IsSEG7Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.SEG7Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.SEG7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG8() As String
            Get
                If Me.IsSEG8Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.SEG8Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.SEG8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG9() As String
            Get
                If Me.IsSEG9Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.SEG9Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.SEG9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG10() As String
            Get
                If Me.IsSEG10Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.SEG10Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.SEG10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExpAccount() As String
            Get
                If Me.IsExpAccountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.ExpAccountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.ExpAccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPSEG1() As String
            Get
                If Me.IsEXPSEG1Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.EXPSEG1Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.EXPSEG1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPSEG2() As String
            Get
                If Me.IsEXPSEG2Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.EXPSEG2Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.EXPSEG2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPSEG3() As String
            Get
                If Me.IsEXPSEG3Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.EXPSEG3Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.EXPSEG3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPSEG4() As String
            Get
                If Me.IsEXPSEG4Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.EXPSEG4Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.EXPSEG4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPSEG5() As String
            Get
                If Me.IsEXPSEG5Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.EXPSEG5Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.EXPSEG5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPSEG6() As String
            Get
                If Me.IsEXPSEG6Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.EXPSEG6Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.EXPSEG6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPSEG7() As String
            Get
                If Me.IsEXPSEG7Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.EXPSEG7Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.EXPSEG7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPSEG8() As String
            Get
                If Me.IsEXPSEG8Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.EXPSEG8Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.EXPSEG8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPSEG9() As String
            Get
                If Me.IsEXPSEG9Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.EXPSEG9Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.EXPSEG9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPSEG10() As String
            Get
                If Me.IsEXPSEG10Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableAPTransExport2.EXPSEG10Column),String)
                End If
            End Get
            Set
                Me(Me.tableAPTransExport2.EXPSEG10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APTransExport1Row() As APTransExport1Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("APTransExport1_APTransExport2")),APTransExport1Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("APTransExport1_APTransExport2"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceNumberNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.InvoiceNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceNumberNull()
            Me(Me.tableAPTransExport2.InvoiceNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPONumberNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.PONumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPONumberNull()
            Me(Me.tableAPTransExport2.PONumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOLineNumNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.POLineNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOLineNumNull()
            Me(Me.tableAPTransExport2.POLineNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateReceivedNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.DateReceivedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateReceivedNull()
            Me(Me.tableAPTransExport2.DateReceivedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLineDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.LineDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLineDescriptionNull()
            Me(Me.tableAPTransExport2.LineDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistributionTypeNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.DistributionTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistributionTypeNull()
            Me(Me.tableAPTransExport2.DistributionTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAccountNumNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.AccountNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAccountNumNull()
            Me(Me.tableAPTransExport2.AccountNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDebitNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.DebitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDebitNull()
            Me(Me.tableAPTransExport2.DebitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.CreditColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditNull()
            Me(Me.tableAPTransExport2.CreditColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxCodeNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.TaxCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxCodeNull()
            Me(Me.tableAPTransExport2.TaxCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyNull()
            Me(Me.tableAPTransExport2.QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitPriceNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.UnitPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitPriceNull()
            Me(Me.tableAPTransExport2.UnitPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsReversalNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.IsReversalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsReversalNull()
            Me(Me.tableAPTransExport2.IsReversalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTax1AmountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.Tax1AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTax1AmountNull()
            Me(Me.tableAPTransExport2.Tax1AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTax1AccountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.Tax1AccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTax1AccountNull()
            Me(Me.tableAPTransExport2.Tax1AccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTax1HoldAccountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.Tax1HoldAccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTax1HoldAccountNull()
            Me(Me.tableAPTransExport2.Tax1HoldAccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTax2AmountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.Tax2AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTax2AmountNull()
            Me(Me.tableAPTransExport2.Tax2AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTax2AccountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.Tax2AccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTax2AccountNull()
            Me(Me.tableAPTransExport2.Tax2AccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTax2HoldAccountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.Tax2HoldAccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTax2HoldAccountNull()
            Me(Me.tableAPTransExport2.Tax2HoldAccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTax3AmountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.Tax3AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTax3AmountNull()
            Me(Me.tableAPTransExport2.Tax3AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTax3AccountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.Tax3AccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTax3AccountNull()
            Me(Me.tableAPTransExport2.Tax3AccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTax3HoldAccountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.Tax3HoldAccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTax3HoldAccountNull()
            Me(Me.tableAPTransExport2.Tax3HoldAccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTax4AmountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.Tax4AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTax4AmountNull()
            Me(Me.tableAPTransExport2.Tax4AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTax4AccountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.Tax4AccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTax4AccountNull()
            Me(Me.tableAPTransExport2.Tax4AccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTax4HoldAccountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.Tax4HoldAccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTax4HoldAccountNull()
            Me(Me.tableAPTransExport2.Tax4HoldAccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG1Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.SEG1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG1Null()
            Me(Me.tableAPTransExport2.SEG1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG2Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.SEG2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG2Null()
            Me(Me.tableAPTransExport2.SEG2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG3Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.SEG3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG3Null()
            Me(Me.tableAPTransExport2.SEG3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG4Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.SEG4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG4Null()
            Me(Me.tableAPTransExport2.SEG4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG5Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.SEG5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG5Null()
            Me(Me.tableAPTransExport2.SEG5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG6Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.SEG6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG6Null()
            Me(Me.tableAPTransExport2.SEG6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG7Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.SEG7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG7Null()
            Me(Me.tableAPTransExport2.SEG7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG8Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.SEG8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG8Null()
            Me(Me.tableAPTransExport2.SEG8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG9Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.SEG9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG9Null()
            Me(Me.tableAPTransExport2.SEG9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG10Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.SEG10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG10Null()
            Me(Me.tableAPTransExport2.SEG10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpAccountNull() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.ExpAccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpAccountNull()
            Me(Me.tableAPTransExport2.ExpAccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPSEG1Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.EXPSEG1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPSEG1Null()
            Me(Me.tableAPTransExport2.EXPSEG1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPSEG2Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.EXPSEG2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPSEG2Null()
            Me(Me.tableAPTransExport2.EXPSEG2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPSEG3Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.EXPSEG3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPSEG3Null()
            Me(Me.tableAPTransExport2.EXPSEG3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPSEG4Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.EXPSEG4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPSEG4Null()
            Me(Me.tableAPTransExport2.EXPSEG4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPSEG5Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.EXPSEG5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPSEG5Null()
            Me(Me.tableAPTransExport2.EXPSEG5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPSEG6Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.EXPSEG6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPSEG6Null()
            Me(Me.tableAPTransExport2.EXPSEG6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPSEG7Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.EXPSEG7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPSEG7Null()
            Me(Me.tableAPTransExport2.EXPSEG7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPSEG8Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.EXPSEG8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPSEG8Null()
            Me(Me.tableAPTransExport2.EXPSEG8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPSEG9Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.EXPSEG9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPSEG9Null()
            Me(Me.tableAPTransExport2.EXPSEG9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPSEG10Null() As Boolean
            Return Me.IsNull(Me.tableAPTransExport2.EXPSEG10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPSEG10Null()
            Me(Me.tableAPTransExport2.EXPSEG10Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GlTransExportRow
        Inherits Global.System.Data.DataRow
        
        Private tableGlTransExport As GlTransExportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGlTransExport = CType(Me.Table,GlTransExportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Batch_Number() As String
            Get
                If Me.IsBatch_NumberNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.Batch_NumberColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.Batch_NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Journal_Number() As String
            Get
                If Me.IsJournal_NumberNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.Journal_NumberColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.Journal_NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Account_Number() As String
            Get
                If Me.IsAccount_NumberNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.Account_NumberColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.Account_NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As String
            Get
                If Me.IsAmountNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.AmountColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PostDate() As String
            Get
                If Me.IsPostDateNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.PostDateColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.PostDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Journal_Description() As String
            Get
                If Me.IsJournal_DescriptionNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.Journal_DescriptionColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.Journal_DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Journal_Source() As String
            Get
                If Me.IsJournal_SourceNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.Journal_SourceColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.Journal_SourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrType() As String
            Get
                If Me.IsCurrTypeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.CurrTypeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.CurrTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrRate() As String
            Get
                If Me.IsCurrRateNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.CurrRateColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.CurrRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransactionDate() As String
            Get
                If Me.IsTransactionDateNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.TransactionDateColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.TransactionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG1() As String
            Get
                If Me.IsSEG1Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.SEG1Column),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.SEG1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG2() As String
            Get
                If Me.IsSEG2Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.SEG2Column),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.SEG2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG3() As String
            Get
                If Me.IsSEG3Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.SEG3Column),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.SEG3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG4() As String
            Get
                If Me.IsSEG4Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.SEG4Column),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.SEG4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG5() As String
            Get
                If Me.IsSEG5Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.SEG5Column),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.SEG5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG6() As String
            Get
                If Me.IsSEG6Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.SEG6Column),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.SEG6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG7() As String
            Get
                If Me.IsSEG7Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.SEG7Column),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.SEG7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG8() As String
            Get
                If Me.IsSEG8Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.SEG8Column),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.SEG8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG9() As String
            Get
                If Me.IsSEG9Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.SEG9Column),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.SEG9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEG10() As String
            Get
                If Me.IsSEG10Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.SEG10Column),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.SEG10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Guardian_Source() As String
            Get
                If Me.IsGuardian_SourceNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.Guardian_SourceColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.Guardian_SourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SupplierNum() As String
            Get
                If Me.IsSupplierNumNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.SupplierNumColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.SupplierNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SupplierName() As String
            Get
                If Me.IsSupplierNameNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.SupplierNameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.SupplierNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PONum() As String
            Get
                If Me.IsPONumNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.PONumColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.PONumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceNum() As String
            Get
                If Me.IsInvoiceNumNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.InvoiceNumColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.InvoiceNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceDate() As String
            Get
                If Me.IsInvoiceDateNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.InvoiceDateColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.InvoiceDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentDate() As String
            Get
                If Me.IsPaymentDateNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.PaymentDateColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.PaymentDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CatalogCode() As String
            Get
                If Me.IsCatalogCodeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.CatalogCodeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.CatalogCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CatalogShort_Desc() As String
            Get
                If Me.IsCatalogShort_DescNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.CatalogShort_DescColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.CatalogShort_DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PartDesc() As String
            Get
                If Me.IsPartDescNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.PartDescColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.PartDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SupPartNum() As String
            Get
                If Me.IsSupPartNumNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.SupPartNumColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.SupPartNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxCode() As String
            Get
                If Me.IsTaxCodeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.TaxCodeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.TaxCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptDate() As String
            Get
                If Me.IsReceiptDateNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.ReceiptDateColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.ReceiptDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceRefNo() As String
            Get
                If Me.IsInvoiceRefNoNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.InvoiceRefNoColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.InvoiceRefNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dest() As String
            Get
                If Me.IsDestNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.DestColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.DestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsReversal() As String
            Get
                If Me.IsIsReversalNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.IsReversalColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.IsReversalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Receipt_Journal_Number() As String
            Get
                If Me.IsReceipt_Journal_NumberNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableGlTransExport.Receipt_Journal_NumberColumn),String)
                End If
            End Get
            Set
                Me(Me.tableGlTransExport.Receipt_Journal_NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBatch_NumberNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.Batch_NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBatch_NumberNull()
            Me(Me.tableGlTransExport.Batch_NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJournal_NumberNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.Journal_NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJournal_NumberNull()
            Me(Me.tableGlTransExport.Journal_NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAccount_NumberNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.Account_NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAccount_NumberNull()
            Me(Me.tableGlTransExport.Account_NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountNull()
            Me(Me.tableGlTransExport.AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPostDateNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.PostDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPostDateNull()
            Me(Me.tableGlTransExport.PostDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJournal_DescriptionNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.Journal_DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJournal_DescriptionNull()
            Me(Me.tableGlTransExport.Journal_DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJournal_SourceNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.Journal_SourceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJournal_SourceNull()
            Me(Me.tableGlTransExport.Journal_SourceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrTypeNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.CurrTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrTypeNull()
            Me(Me.tableGlTransExport.CurrTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrRateNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.CurrRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrRateNull()
            Me(Me.tableGlTransExport.CurrRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransactionDateNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.TransactionDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransactionDateNull()
            Me(Me.tableGlTransExport.TransactionDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG1Null() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.SEG1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG1Null()
            Me(Me.tableGlTransExport.SEG1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG2Null() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.SEG2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG2Null()
            Me(Me.tableGlTransExport.SEG2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG3Null() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.SEG3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG3Null()
            Me(Me.tableGlTransExport.SEG3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG4Null() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.SEG4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG4Null()
            Me(Me.tableGlTransExport.SEG4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG5Null() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.SEG5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG5Null()
            Me(Me.tableGlTransExport.SEG5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG6Null() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.SEG6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG6Null()
            Me(Me.tableGlTransExport.SEG6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG7Null() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.SEG7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG7Null()
            Me(Me.tableGlTransExport.SEG7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG8Null() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.SEG8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG8Null()
            Me(Me.tableGlTransExport.SEG8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG9Null() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.SEG9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG9Null()
            Me(Me.tableGlTransExport.SEG9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEG10Null() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.SEG10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEG10Null()
            Me(Me.tableGlTransExport.SEG10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGuardian_SourceNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.Guardian_SourceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGuardian_SourceNull()
            Me(Me.tableGlTransExport.Guardian_SourceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupplierNumNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.SupplierNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupplierNumNull()
            Me(Me.tableGlTransExport.SupplierNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupplierNameNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.SupplierNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupplierNameNull()
            Me(Me.tableGlTransExport.SupplierNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPONumNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.PONumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPONumNull()
            Me(Me.tableGlTransExport.PONumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceNumNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.InvoiceNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceNumNull()
            Me(Me.tableGlTransExport.InvoiceNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceDateNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.InvoiceDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceDateNull()
            Me(Me.tableGlTransExport.InvoiceDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentDateNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.PaymentDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentDateNull()
            Me(Me.tableGlTransExport.PaymentDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCatalogCodeNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.CatalogCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCatalogCodeNull()
            Me(Me.tableGlTransExport.CatalogCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCatalogShort_DescNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.CatalogShort_DescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCatalogShort_DescNull()
            Me(Me.tableGlTransExport.CatalogShort_DescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPartDescNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.PartDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPartDescNull()
            Me(Me.tableGlTransExport.PartDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupPartNumNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.SupPartNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupPartNumNull()
            Me(Me.tableGlTransExport.SupPartNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxCodeNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.TaxCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxCodeNull()
            Me(Me.tableGlTransExport.TaxCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceiptDateNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.ReceiptDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceiptDateNull()
            Me(Me.tableGlTransExport.ReceiptDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceRefNoNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.InvoiceRefNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceRefNoNull()
            Me(Me.tableGlTransExport.InvoiceRefNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDestNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.DestColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDestNull()
            Me(Me.tableGlTransExport.DestColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsReversalNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.IsReversalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsReversalNull()
            Me(Me.tableGlTransExport.IsReversalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceipt_Journal_NumberNull() As Boolean
            Return Me.IsNull(Me.tableGlTransExport.Receipt_Journal_NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceipt_Journal_NumberNull()
            Me(Me.tableGlTransExport.Receipt_Journal_NumberColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Journal_HeadersRow
        Inherits Global.System.Data.DataRow
        
        Private tableJournal_Headers As Journal_HeadersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableJournal_Headers = CType(Me.Table,Journal_HeadersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BATCHID() As String
            Get
                Try 
                    Return CType(Me(Me.tableJournal_Headers.BATCHIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCHID' in table 'Journal_Headers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJournal_Headers.BATCHIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BTCHENTRY() As String
            Get
                Try 
                    Return CType(Me(Me.tableJournal_Headers.BTCHENTRYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BTCHENTRY' in table 'Journal_Headers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJournal_Headers.BTCHENTRYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SRCELEDGER() As String
            Get
                Try 
                    Return CType(Me(Me.tableJournal_Headers.SRCELEDGERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SRCELEDGER' in table 'Journal_Headers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJournal_Headers.SRCELEDGERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SRCETYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableJournal_Headers.SRCETYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SRCETYPE' in table 'Journal_Headers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJournal_Headers.SRCETYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATEENTRY() As String
            Get
                Try 
                    Return CType(Me(Me.tableJournal_Headers.DATEENTRYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEENTRY' in table 'Journal_Headers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJournal_Headers.DATEENTRYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FSCSYR() As String
            Get
                Try 
                    Return CType(Me(Me.tableJournal_Headers.FSCSYRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FSCSYR' in table 'Journal_Headers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJournal_Headers.FSCSYRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FSCSPERD() As String
            Get
                Try 
                    Return CType(Me(Me.tableJournal_Headers.FSCSPERDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FSCSPERD' in table 'Journal_Headers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJournal_Headers.FSCSPERDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBATCHIDNull() As Boolean
            Return Me.IsNull(Me.tableJournal_Headers.BATCHIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBATCHIDNull()
            Me(Me.tableJournal_Headers.BATCHIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBTCHENTRYNull() As Boolean
            Return Me.IsNull(Me.tableJournal_Headers.BTCHENTRYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBTCHENTRYNull()
            Me(Me.tableJournal_Headers.BTCHENTRYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSRCELEDGERNull() As Boolean
            Return Me.IsNull(Me.tableJournal_Headers.SRCELEDGERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSRCELEDGERNull()
            Me(Me.tableJournal_Headers.SRCELEDGERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSRCETYPENull() As Boolean
            Return Me.IsNull(Me.tableJournal_Headers.SRCETYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSRCETYPENull()
            Me(Me.tableJournal_Headers.SRCETYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATEENTRYNull() As Boolean
            Return Me.IsNull(Me.tableJournal_Headers.DATEENTRYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATEENTRYNull()
            Me(Me.tableJournal_Headers.DATEENTRYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFSCSYRNull() As Boolean
            Return Me.IsNull(Me.tableJournal_Headers.FSCSYRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFSCSYRNull()
            Me(Me.tableJournal_Headers.FSCSYRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFSCSPERDNull() As Boolean
            Return Me.IsNull(Me.tableJournal_Headers.FSCSPERDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFSCSPERDNull()
            Me(Me.tableJournal_Headers.FSCSPERDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetJournal_DetailsRows() As Journal_DetailsRow()
            If (Me.Table.ChildRelations("Journal_Headers_Journal_Details") Is Nothing) Then
                Return New Journal_DetailsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Journal_Headers_Journal_Details")),Journal_DetailsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Journal_DetailsRow
        Inherits Global.System.Data.DataRow
        
        Private tableJournal_Details As Journal_DetailsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableJournal_Details = CType(Me.Table,Journal_DetailsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BATCHNBR() As String
            Get
                Try 
                    Return CType(Me(Me.tableJournal_Details.BATCHNBRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCHNBR' in table 'Journal_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJournal_Details.BATCHNBRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JOURNALID() As String
            Get
                Try 
                    Return CType(Me(Me.tableJournal_Details.JOURNALIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JOURNALID' in table 'Journal_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJournal_Details.JOURNALIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANSNBR() As String
            Get
                Try 
                    Return CType(Me(Me.tableJournal_Details.TRANSNBRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSNBR' in table 'Journal_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJournal_Details.TRANSNBRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTID() As String
            Get
                Try 
                    Return CType(Me(Me.tableJournal_Details.ACCTIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTID' in table 'Journal_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJournal_Details.ACCTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANSAMT() As String
            Get
                Try 
                    Return CType(Me(Me.tableJournal_Details.TRANSAMTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSAMT' in table 'Journal_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJournal_Details.TRANSAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANSDESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableJournal_Details.TRANSDESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSDESC' in table 'Journal_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJournal_Details.TRANSDESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANSDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableJournal_Details.TRANSDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSDATE' in table 'Journal_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJournal_Details.TRANSDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Journal_HeadersRowParent() As Journal_HeadersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Journal_Headers_Journal_Details")),Journal_HeadersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Journal_Headers_Journal_Details"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBATCHNBRNull() As Boolean
            Return Me.IsNull(Me.tableJournal_Details.BATCHNBRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBATCHNBRNull()
            Me(Me.tableJournal_Details.BATCHNBRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJOURNALIDNull() As Boolean
            Return Me.IsNull(Me.tableJournal_Details.JOURNALIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJOURNALIDNull()
            Me(Me.tableJournal_Details.JOURNALIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANSNBRNull() As Boolean
            Return Me.IsNull(Me.tableJournal_Details.TRANSNBRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANSNBRNull()
            Me(Me.tableJournal_Details.TRANSNBRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTIDNull() As Boolean
            Return Me.IsNull(Me.tableJournal_Details.ACCTIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTIDNull()
            Me(Me.tableJournal_Details.ACCTIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANSAMTNull() As Boolean
            Return Me.IsNull(Me.tableJournal_Details.TRANSAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANSAMTNull()
            Me(Me.tableJournal_Details.TRANSAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANSDESCNull() As Boolean
            Return Me.IsNull(Me.tableJournal_Details.TRANSDESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANSDESCNull()
            Me(Me.tableJournal_Details.TRANSDESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANSDATENull() As Boolean
            Return Me.IsNull(Me.tableJournal_Details.TRANSDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANSDATENull()
            Me(Me.tableJournal_Details.TRANSDATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Invoice_HeaderRow
        Inherits Global.System.Data.DataRow
        
        Private tableInvoice_Header As Invoice_HeaderDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableInvoice_Header = CType(Me.Table,Invoice_HeaderDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CNTBTCH() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Header.CNTBTCHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CNTBTCH' in table 'Invoice_Header' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Header.CNTBTCHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CNTITEM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Header.CNTITEMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CNTITEM' in table 'Invoice_Header' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Header.CNTITEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDVEND() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Header.IDVENDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDVEND' in table 'Invoice_Header' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Header.IDVENDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDINVC() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Header.IDINVCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDINVC' in table 'Invoice_Header' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Header.IDINVCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEXTTRX() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Header.TEXTTRXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEXTTRX' in table 'Invoice_Header' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Header.TEXTTRXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDRNBR() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Header.ORDRNBRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDRNBR' in table 'Invoice_Header' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Header.ORDRNBRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PONBR() As String
            Get
                If Me.IsPONBRNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableInvoice_Header.PONBRColumn),String)
                End If
            End Get
            Set
                Me(Me.tableInvoice_Header.PONBRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVCDESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Header.INVCDESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVCDESC' in table 'Invoice_Header' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Header.INVCDESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATEINVC() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Header.DATEINVCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEINVC' in table 'Invoice_Header' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Header.DATEINVCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTGROSTOT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Header.AMTGROSTOTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTGROSTOT' in table 'Invoice_Header' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Header.AMTGROSTOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TERMCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Header.TERMCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TERMCODE' in table 'Invoice_Header' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Header.TERMCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SWTXBSECTL() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Header.SWTXBSECTLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SWTXBSECTL' in table 'Invoice_Header' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Header.SWTXBSECTLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SWTXCTLRC() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Header.SWTXCTLRCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SWTXCTLRC' in table 'Invoice_Header' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Header.SWTXCTLRCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SWCALCTX() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Header.SWCALCTXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SWCALCTX' in table 'Invoice_Header' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Header.SWCALCTXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTTAX1() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Header.AMTTAX1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTTAX1' in table 'Invoice_Header' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Header.AMTTAX1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTTAX2() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Header.AMTTAX2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTTAX2' in table 'Invoice_Header' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Header.AMTTAX2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCNTBTCHNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Header.CNTBTCHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCNTBTCHNull()
            Me(Me.tableInvoice_Header.CNTBTCHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCNTITEMNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Header.CNTITEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCNTITEMNull()
            Me(Me.tableInvoice_Header.CNTITEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDVENDNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Header.IDVENDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDVENDNull()
            Me(Me.tableInvoice_Header.IDVENDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDINVCNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Header.IDINVCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDINVCNull()
            Me(Me.tableInvoice_Header.IDINVCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEXTTRXNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Header.TEXTTRXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEXTTRXNull()
            Me(Me.tableInvoice_Header.TEXTTRXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDRNBRNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Header.ORDRNBRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDRNBRNull()
            Me(Me.tableInvoice_Header.ORDRNBRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPONBRNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Header.PONBRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPONBRNull()
            Me(Me.tableInvoice_Header.PONBRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVCDESCNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Header.INVCDESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVCDESCNull()
            Me(Me.tableInvoice_Header.INVCDESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATEINVCNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Header.DATEINVCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATEINVCNull()
            Me(Me.tableInvoice_Header.DATEINVCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTGROSTOTNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Header.AMTGROSTOTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTGROSTOTNull()
            Me(Me.tableInvoice_Header.AMTGROSTOTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTERMCODENull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Header.TERMCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTERMCODENull()
            Me(Me.tableInvoice_Header.TERMCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSWTXBSECTLNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Header.SWTXBSECTLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSWTXBSECTLNull()
            Me(Me.tableInvoice_Header.SWTXBSECTLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSWTXCTLRCNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Header.SWTXCTLRCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSWTXCTLRCNull()
            Me(Me.tableInvoice_Header.SWTXCTLRCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSWCALCTXNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Header.SWCALCTXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSWCALCTXNull()
            Me(Me.tableInvoice_Header.SWCALCTXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTTAX1Null() As Boolean
            Return Me.IsNull(Me.tableInvoice_Header.AMTTAX1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTTAX1Null()
            Me(Me.tableInvoice_Header.AMTTAX1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTTAX2Null() As Boolean
            Return Me.IsNull(Me.tableInvoice_Header.AMTTAX2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTTAX2Null()
            Me(Me.tableInvoice_Header.AMTTAX2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetInvoice_DetailsRows() As Invoice_DetailsRow()
            If (Me.Table.ChildRelations("Invoice_Header_Invoice_Details") Is Nothing) Then
                Return New Invoice_DetailsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Invoice_Header_Invoice_Details")),Invoice_DetailsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Invoice_DetailsRow
        Inherits Global.System.Data.DataRow
        
        Private tableInvoice_Details As Invoice_DetailsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableInvoice_Details = CType(Me.Table,Invoice_DetailsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CNTBTCH() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Details.CNTBTCHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CNTBTCH' in table 'Invoice_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Details.CNTBTCHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CNTITEM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Details.CNTITEMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CNTITEM' in table 'Invoice_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Details.CNTITEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CNTLINE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Details.CNTLINEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CNTLINE' in table 'Invoice_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Details.CNTLINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDGLACCT() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Details.IDGLACCTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDGLACCT' in table 'Invoice_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Details.IDGLACCTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTDIST() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Details.AMTDISTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTDIST' in table 'Invoice_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Details.AMTDISTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEXTDESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Details.TEXTDESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEXTDESC' in table 'Invoice_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Details.TEXTDESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTTAX1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Details.AMTTAX1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTTAX1' in table 'Invoice_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Details.AMTTAX1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTTAX2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Details.AMTTAX2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTTAX2' in table 'Invoice_Details' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Details.AMTTAX2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Invoice_HeaderRowParent() As Invoice_HeaderRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Invoice_Header_Invoice_Details")),Invoice_HeaderRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Invoice_Header_Invoice_Details"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCNTBTCHNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Details.CNTBTCHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCNTBTCHNull()
            Me(Me.tableInvoice_Details.CNTBTCHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCNTITEMNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Details.CNTITEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCNTITEMNull()
            Me(Me.tableInvoice_Details.CNTITEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCNTLINENull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Details.CNTLINEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCNTLINENull()
            Me(Me.tableInvoice_Details.CNTLINEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDGLACCTNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Details.IDGLACCTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDGLACCTNull()
            Me(Me.tableInvoice_Details.IDGLACCTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTDISTNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Details.AMTDISTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTDISTNull()
            Me(Me.tableInvoice_Details.AMTDISTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEXTDESCNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Details.TEXTDESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEXTDESCNull()
            Me(Me.tableInvoice_Details.TEXTDESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTTAX1Null() As Boolean
            Return Me.IsNull(Me.tableInvoice_Details.AMTTAX1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTTAX1Null()
            Me(Me.tableInvoice_Details.AMTTAX1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTTAX2Null() As Boolean
            Return Me.IsNull(Me.tableInvoice_Details.AMTTAX2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTTAX2Null()
            Me(Me.tableInvoice_Details.AMTTAX2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Invoice_Payment_Schedules_Row
        Inherits Global.System.Data.DataRow
        
        Private tableInvoice_Payment_Schedules_ As Invoice_Payment_Schedules_DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableInvoice_Payment_Schedules_ = CType(Me.Table,Invoice_Payment_Schedules_DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CNTBTCH() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Payment_Schedules_.CNTBTCHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CNTBTCH' in table 'Invoice_Payment_Schedules ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Payment_Schedules_.CNTBTCHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CNTITEM() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Payment_Schedules_.CNTITEMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CNTITEM' in table 'Invoice_Payment_Schedules ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Payment_Schedules_.CNTITEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CNTPAYM() As String
            Get
                Try 
                    Return CType(Me(Me.tableInvoice_Payment_Schedules_.CNTPAYMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CNTPAYM' in table 'Invoice_Payment_Schedules ' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInvoice_Payment_Schedules_.CNTPAYMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCNTBTCHNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Payment_Schedules_.CNTBTCHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCNTBTCHNull()
            Me(Me.tableInvoice_Payment_Schedules_.CNTBTCHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCNTITEMNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Payment_Schedules_.CNTITEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCNTITEMNull()
            Me(Me.tableInvoice_Payment_Schedules_.CNTITEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCNTPAYMNull() As Boolean
            Return Me.IsNull(Me.tableInvoice_Payment_Schedules_.CNTPAYMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCNTPAYMNull()
            Me(Me.tableInvoice_Payment_Schedules_.CNTPAYMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class _Account_txtRow
        Inherits Global.System.Data.DataRow
        
        Private _tableAccount_txt As _Account_txtDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me._tableAccount_txt = CType(Me.Table,_Account_txtDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Account_() As String
            Get
                Try 
                    Return CType(Me(Me._tableAccount_txt._Account_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Account#' in table 'Account.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableAccount_txt._Account_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me._tableAccount_txt.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Account.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableAccount_txt.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Short
            Get
                Try 
                    Return CType(Me(Me._tableAccount_txt.StatusColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'Account.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableAccount_txt.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Account_Null() As Boolean
            Return Me.IsNull(Me._tableAccount_txt._Account_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Account_Null()
            Me(Me._tableAccount_txt._Account_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me._tableAccount_txt.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me._tableAccount_txt.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me._tableAccount_txt.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me._tableAccount_txt.StatusColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class _Supplier_txtRow
        Inherits Global.System.Data.DataRow
        
        Private _tableSupplier_txt As _Supplier_txtDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me._tableSupplier_txt = CType(Me.Table,_Supplier_txtDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Num() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.NumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Num' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.NumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Addr1() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.Addr1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Addr1' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.Addr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Addr2() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.Addr2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Addr2' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.Addr2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StateProv() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.StateProvColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StateProv' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.StateProvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Country() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.CountryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Country' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ZipPC() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.ZipPCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ZipPC' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.ZipPCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.PhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Phone' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.PhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fax() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.FaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fax' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.FaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contact() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.ContactColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contact' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.ContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Manager() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.ManagerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Manager' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.ManagerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Terms() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.TermsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Terms' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.TermsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Currency_Code() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.Currency_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Currency Code' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.Currency_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Credit_Limit() As Integer
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.Credit_LimitColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Credit Limit' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.Credit_LimitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Protocol() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.ProtocolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Protocol' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.ProtocolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Default_Tax_Profile() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.Default_Tax_ProfileColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Default Tax Profile' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.Default_Tax_ProfileColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillAddr1() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.BillAddr1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillAddr1' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.BillAddr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillAddr2() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.BillAddr2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillAddr2' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.BillAddr2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillCity() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.BillCityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillCity' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.BillCityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillStatProv() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.BillStatProvColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillStatProv' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.BillStatProvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillPC() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.BillPCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillPC' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.BillPCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillCountry() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.BillCountryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillCountry' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.BillCountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxNum() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.TaxNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxNum' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.TaxNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APAccount() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.APAccountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'APAccount' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.APAccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WWW() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.WWWColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WWW' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.WWWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Notes() As String
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Short
            Get
                Try 
                    Return CType(Me(Me._tableSupplier_txt.StatusColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'Supplier.txt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me._tableSupplier_txt.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.NumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumNull()
            Me(Me._tableSupplier_txt.NumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me._tableSupplier_txt.NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddr1Null() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.Addr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddr1Null()
            Me(Me._tableSupplier_txt.Addr1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddr2Null() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.Addr2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddr2Null()
            Me(Me._tableSupplier_txt.Addr2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me._tableSupplier_txt.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateProvNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.StateProvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateProvNull()
            Me(Me._tableSupplier_txt.StateProvColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCountryNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.CountryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCountryNull()
            Me(Me._tableSupplier_txt.CountryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipPCNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.ZipPCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipPCNull()
            Me(Me._tableSupplier_txt.ZipPCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhoneNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.PhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhoneNull()
            Me(Me._tableSupplier_txt.PhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.FaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNull()
            Me(Me._tableSupplier_txt.FaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.ContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactNull()
            Me(Me._tableSupplier_txt.ContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsManagerNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.ManagerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetManagerNull()
            Me(Me._tableSupplier_txt.ManagerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTermsNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.TermsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTermsNull()
            Me(Me._tableSupplier_txt.TermsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrency_CodeNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.Currency_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrency_CodeNull()
            Me(Me._tableSupplier_txt.Currency_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCredit_LimitNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.Credit_LimitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCredit_LimitNull()
            Me(Me._tableSupplier_txt.Credit_LimitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProtocolNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.ProtocolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProtocolNull()
            Me(Me._tableSupplier_txt.ProtocolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDefault_Tax_ProfileNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.Default_Tax_ProfileColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDefault_Tax_ProfileNull()
            Me(Me._tableSupplier_txt.Default_Tax_ProfileColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillAddr1Null() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.BillAddr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillAddr1Null()
            Me(Me._tableSupplier_txt.BillAddr1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillAddr2Null() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.BillAddr2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillAddr2Null()
            Me(Me._tableSupplier_txt.BillAddr2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillCityNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.BillCityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillCityNull()
            Me(Me._tableSupplier_txt.BillCityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillStatProvNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.BillStatProvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillStatProvNull()
            Me(Me._tableSupplier_txt.BillStatProvColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillPCNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.BillPCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillPCNull()
            Me(Me._tableSupplier_txt.BillPCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillCountryNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.BillCountryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillCountryNull()
            Me(Me._tableSupplier_txt.BillCountryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxNumNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.TaxNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxNumNull()
            Me(Me._tableSupplier_txt.TaxNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAPAccountNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.APAccountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAPAccountNull()
            Me(Me._tableSupplier_txt.APAccountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me._tableSupplier_txt.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWWWNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.WWWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWWWNull()
            Me(Me._tableSupplier_txt.WWWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotesNull()
            Me(Me._tableSupplier_txt.NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me._tableSupplier_txt.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me._tableSupplier_txt.StatusColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AP0015Row
        Inherits Global.System.Data.DataRow
        
        Private tableAP0015 As AP0015DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAP0015 = CType(Me.Table,AP0015DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENDORID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.VENDORIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VENDORID' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.VENDORIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHORTNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.SHORTNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHORTNAME' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.SHORTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDGRP() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.IDGRPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDGRP' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.IDGRPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SWACTV() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.SWACTVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SWACTV' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.SWACTVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATEINAC() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DATEINACColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEINAC' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DATEINACColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATELASTMN() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DATELASTMNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATELASTMN' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DATELASTMNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SWHOLD() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.SWHOLDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SWHOLD' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.SWHOLDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATESTART() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DATESTARTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATESTART' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DATESTARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDPPNT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.IDPPNTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDPPNT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.IDPPNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENDNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.VENDNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VENDNAME' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.VENDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEXTSTRE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.TEXTSTRE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEXTSTRE1' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.TEXTSTRE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEXTSTRE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.TEXTSTRE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEXTSTRE2' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.TEXTSTRE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEXTSTRE3() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.TEXTSTRE3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEXTSTRE3' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.TEXTSTRE3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEXTSTRE4() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.TEXTSTRE4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEXTSTRE4' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.TEXTSTRE4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAMECITY() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.NAMECITYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NAMECITY' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.NAMECITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODESTTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.CODESTTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CODESTTE' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.CODESTTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODEPSTL() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.CODEPSTLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CODEPSTL' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.CODEPSTLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODECTRY() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.CODECTRYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CODECTRY' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.CODECTRYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAMECTAC() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.NAMECTACColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NAMECTAC' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.NAMECTACColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEXTPHON1() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.TEXTPHON1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEXTPHON1' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.TEXTPHON1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEXTPHON2() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.TEXTPHON2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEXTPHON2' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.TEXTPHON2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRIMRMIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.PRIMRMITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRIMRMIT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.PRIMRMITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDACCTSET() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.IDACCTSETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDACCTSET' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.IDACCTSETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURNCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.CURNCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CURNCODE' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.CURNCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RATETYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.RATETYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RATETYPE' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.RATETYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BANKID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.BANKIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BANKID' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.BANKIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRTSEPCHKS() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.PRTSEPCHKSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRTSEPCHKS' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.PRTSEPCHKSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISTSETID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DISTSETIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISTSETID' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DISTSETIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISTCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DISTCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISTCODE' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DISTCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLACCNT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.GLACCNTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GLACCNT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.GLACCNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TERMSCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.TERMSCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TERMSCODE' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.TERMSCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DUPAMTCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DUPAMTCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DUPAMTCODE' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DUPAMTCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DUPDATECD() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DUPDATECDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DUPDATECD' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DUPDATECDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODETAXGRP() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.CODETAXGRPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CODETAXGRP' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.CODETAXGRPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXCLASS1() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.TAXCLASS1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXCLASS1' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.TAXCLASS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXCLASS2() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.TAXCLASS2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXCLASS2' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.TAXCLASS2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXCLASS3() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.TAXCLASS3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXCLASS3' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.TAXCLASS3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXCLASS4() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.TAXCLASS4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXCLASS4' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.TAXCLASS4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXCLASS5() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.TAXCLASS5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXCLASS5' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.TAXCLASS5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXRPTSW() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.TAXRPTSWColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXRPTSW' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.TAXRPTSWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXNBR() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.TAXNBRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXNBR' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.TAXNBRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXIDTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.TAXIDTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXIDTYPE' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.TAXIDTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLASID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.CLASIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLASID' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.CLASIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTCRLIMT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTCRLIMTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTCRLIMT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTCRLIMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTBALDUET() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTBALDUETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTBALDUET' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTBALDUETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTBALDUEH() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTBALDUEHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTBALDUEH' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTBALDUEHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTPPDINVT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTPPDINVTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTPPDINVT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTPPDINVTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTPPDINVH() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTPPDINVHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTPPDINVH' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTPPDINVHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DTLASTRVAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DTLASTRVALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DTLASTRVAL' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DTLASTRVALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTBALLARV() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTBALLARVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTBALLARV' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTBALLARVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CNTOPENINV() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.CNTOPENINVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CNTOPENINV' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.CNTOPENINVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CNTPPDINVC() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.CNTPPDINVCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CNTPPDINVC' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.CNTPPDINVCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CNTINVPAID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.CNTINVPAIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CNTINVPAID' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.CNTINVPAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DAYSTOPAY() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DAYSTOPAYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DAYSTOPAY' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DAYSTOPAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATEINVCHI() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DATEINVCHIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEINVCHI' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DATEINVCHIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATEBALHI() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DATEBALHIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEBALHI' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DATEBALHIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATEINVHIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DATEINVHILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEINVHIL' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DATEINVHILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATEBALHIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DATEBALHILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEBALHIL' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DATEBALHILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATELASTAC() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DATELASTACColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATELASTAC' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DATELASTACColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATELASTIV() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DATELASTIVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATELASTIV' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DATELASTIVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATELASTCR() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DATELASTCRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATELASTCR' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DATELASTCRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATELASTDR() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DATELASTDRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATELASTDR' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DATELASTDRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATELASTPA() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DATELASTPAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATELASTPA' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DATELASTPAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATELASTDI() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DATELASTDIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATELASTDI' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DATELASTDIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATELSTADJ() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DATELSTADJColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATELSTADJ' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DATELSTADJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDINVCHI() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.IDINVCHIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDINVCHI' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.IDINVCHIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDINVCHILY() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.IDINVCHILYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDINVCHILY' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.IDINVCHILYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTINVHIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTINVHITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTINVHIT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTINVHITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTBALHIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTBALHITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTBALHIT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTBALHITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTINVHILT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTINVHILTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTINVHILT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTINVHILTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTBALHILT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTBALHILTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTBALHILT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTBALHILTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTLASTIVT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTLASTIVTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTLASTIVT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTLASTIVTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTLASTCRT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTLASTCRTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTLASTCRT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTLASTCRTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTLASTDRT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTLASTDRTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTLASTDRT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTLASTDRTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTLASTPYT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTLASTPYTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTLASTPYT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTLASTPYTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTLASTDIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTLASTDITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTLASTDIT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTLASTDITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTLASTADT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTLASTADTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTLASTADT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTLASTADTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTINVHIH() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTINVHIHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTINVHIH' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTINVHIHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTBALHIH() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTBALHIHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTBALHIH' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTBALHIHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTINVHILH() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTINVHILHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTINVHILH' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTINVHILHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTBALHILH() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTBALHILHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTBALHILH' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTBALHILHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTLASTIVH() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTLASTIVHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTLASTIVH' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTLASTIVHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTLASTCRH() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTLASTCRHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTLASTCRH' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTLASTCRHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTLASTDRH() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTLASTDRHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTLASTDRH' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTLASTDRHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTLASTPYH() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTLASTPYHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTLASTPYH' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTLASTPYHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTLASTDIH() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTLASTDIHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTLASTDIH' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTLASTDIHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTLASTADH() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTLASTADHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTLASTADH' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTLASTADHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAYMCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.PAYMCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAYMCODE' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.PAYMCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDTAXREGI1() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.IDTAXREGI1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDTAXREGI1' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.IDTAXREGI1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDTAXREGI2() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.IDTAXREGI2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDTAXREGI2' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.IDTAXREGI2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDTAXREGI3() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.IDTAXREGI3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDTAXREGI3' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.IDTAXREGI3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDTAXREGI4() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.IDTAXREGI4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDTAXREGI4' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.IDTAXREGI4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDTAXREGI5() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.IDTAXREGI5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDTAXREGI5' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.IDTAXREGI5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SWDISTBY() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.SWDISTBYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SWDISTBY' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.SWDISTBYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODECHECK() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.CODECHECKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CODECHECK' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.CODECHECKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AVGDAYSPAY() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AVGDAYSPAYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AVGDAYSPAY' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AVGDAYSPAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTINVPDHC() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTINVPDHCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTINVPDHC' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTINVPDHCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMTINVPDTC() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AMTINVPDTCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMTINVPDTC' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AMTINVPDTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CNTNBRCHKS() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.CNTNBRCHKSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CNTNBRCHKS' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.CNTNBRCHKSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SWTXINC1() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.SWTXINC1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SWTXINC1' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.SWTXINC1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SWTXINC2() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.SWTXINC2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SWTXINC2' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.SWTXINC2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SWTXINC3() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.SWTXINC3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SWTXINC3' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.SWTXINC3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SWTXINC4() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.SWTXINC4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SWTXINC4' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.SWTXINC4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SWTXINC5() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.SWTXINC5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SWTXINC5' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.SWTXINC5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMAIL1() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.EMAIL1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMAIL1' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.EMAIL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMAIL2() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.EMAIL2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMAIL2' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.EMAIL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WEBSITE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.WEBSITEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WEBSITE' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.WEBSITEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTACPHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.CTACPHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTACPHONE' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.CTACPHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTACFAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.CTACFAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTACFAX' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.CTACFAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DELMETHOD() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.DELMETHODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DELMETHOD' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.DELMETHODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RTGPERCENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.RTGPERCENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RTGPERCENT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.RTGPERCENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RTGDAYS() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.RTGDAYSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RTGDAYS' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.RTGDAYSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RTGTERMS() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.RTGTERMSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RTGTERMS' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.RTGTERMSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RTGAMTTC() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.RTGAMTTCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RTGAMTTC' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.RTGAMTTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RTGAMTHC() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.RTGAMTHCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RTGAMTHC' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.RTGAMTHCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALUES() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.VALUESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VALUES' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.VALUESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCESSCMD() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.PROCESSCMDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROCESSCMD' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.PROCESSCMDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEXTCUID() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.NEXTCUIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NEXTCUID' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.NEXTCUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LEGALNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.LEGALNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LEGALNAME' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.LEGALNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHK1099AMT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.CHK1099AMTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHK1099AMT' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.CHK1099AMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AP0015_Id() As Integer
            Get
                Return CType(Me(Me.tableAP0015.AP0015_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableAP0015.AP0015_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AP0015_List_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAP0015.AP0015_List_IdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AP0015_List_Id' in table 'AP0015' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAP0015.AP0015_List_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVENDORIDNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.VENDORIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVENDORIDNull()
            Me(Me.tableAP0015.VENDORIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHORTNAMENull() As Boolean
            Return Me.IsNull(Me.tableAP0015.SHORTNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHORTNAMENull()
            Me(Me.tableAP0015.SHORTNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDGRPNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.IDGRPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDGRPNull()
            Me(Me.tableAP0015.IDGRPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSWACTVNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.SWACTVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSWACTVNull()
            Me(Me.tableAP0015.SWACTVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATEINACNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DATEINACColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATEINACNull()
            Me(Me.tableAP0015.DATEINACColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATELASTMNNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DATELASTMNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATELASTMNNull()
            Me(Me.tableAP0015.DATELASTMNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSWHOLDNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.SWHOLDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSWHOLDNull()
            Me(Me.tableAP0015.SWHOLDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATESTARTNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DATESTARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATESTARTNull()
            Me(Me.tableAP0015.DATESTARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDPPNTNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.IDPPNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDPPNTNull()
            Me(Me.tableAP0015.IDPPNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVENDNAMENull() As Boolean
            Return Me.IsNull(Me.tableAP0015.VENDNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVENDNAMENull()
            Me(Me.tableAP0015.VENDNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEXTSTRE1Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.TEXTSTRE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEXTSTRE1Null()
            Me(Me.tableAP0015.TEXTSTRE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEXTSTRE2Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.TEXTSTRE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEXTSTRE2Null()
            Me(Me.tableAP0015.TEXTSTRE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEXTSTRE3Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.TEXTSTRE3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEXTSTRE3Null()
            Me(Me.tableAP0015.TEXTSTRE3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEXTSTRE4Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.TEXTSTRE4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEXTSTRE4Null()
            Me(Me.tableAP0015.TEXTSTRE4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNAMECITYNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.NAMECITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNAMECITYNull()
            Me(Me.tableAP0015.NAMECITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODESTTENull() As Boolean
            Return Me.IsNull(Me.tableAP0015.CODESTTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODESTTENull()
            Me(Me.tableAP0015.CODESTTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODEPSTLNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.CODEPSTLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODEPSTLNull()
            Me(Me.tableAP0015.CODEPSTLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODECTRYNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.CODECTRYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODECTRYNull()
            Me(Me.tableAP0015.CODECTRYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNAMECTACNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.NAMECTACColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNAMECTACNull()
            Me(Me.tableAP0015.NAMECTACColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEXTPHON1Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.TEXTPHON1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEXTPHON1Null()
            Me(Me.tableAP0015.TEXTPHON1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEXTPHON2Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.TEXTPHON2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEXTPHON2Null()
            Me(Me.tableAP0015.TEXTPHON2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRIMRMITNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.PRIMRMITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRIMRMITNull()
            Me(Me.tableAP0015.PRIMRMITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDACCTSETNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.IDACCTSETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDACCTSETNull()
            Me(Me.tableAP0015.IDACCTSETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCURNCODENull() As Boolean
            Return Me.IsNull(Me.tableAP0015.CURNCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCURNCODENull()
            Me(Me.tableAP0015.CURNCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRATETYPENull() As Boolean
            Return Me.IsNull(Me.tableAP0015.RATETYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRATETYPENull()
            Me(Me.tableAP0015.RATETYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBANKIDNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.BANKIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBANKIDNull()
            Me(Me.tableAP0015.BANKIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRTSEPCHKSNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.PRTSEPCHKSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRTSEPCHKSNull()
            Me(Me.tableAP0015.PRTSEPCHKSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDISTSETIDNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DISTSETIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDISTSETIDNull()
            Me(Me.tableAP0015.DISTSETIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDISTCODENull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DISTCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDISTCODENull()
            Me(Me.tableAP0015.DISTCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLACCNTNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.GLACCNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLACCNTNull()
            Me(Me.tableAP0015.GLACCNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTERMSCODENull() As Boolean
            Return Me.IsNull(Me.tableAP0015.TERMSCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTERMSCODENull()
            Me(Me.tableAP0015.TERMSCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDUPAMTCODENull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DUPAMTCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDUPAMTCODENull()
            Me(Me.tableAP0015.DUPAMTCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDUPDATECDNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DUPDATECDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDUPDATECDNull()
            Me(Me.tableAP0015.DUPDATECDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODETAXGRPNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.CODETAXGRPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODETAXGRPNull()
            Me(Me.tableAP0015.CODETAXGRPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXCLASS1Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.TAXCLASS1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXCLASS1Null()
            Me(Me.tableAP0015.TAXCLASS1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXCLASS2Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.TAXCLASS2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXCLASS2Null()
            Me(Me.tableAP0015.TAXCLASS2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXCLASS3Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.TAXCLASS3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXCLASS3Null()
            Me(Me.tableAP0015.TAXCLASS3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXCLASS4Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.TAXCLASS4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXCLASS4Null()
            Me(Me.tableAP0015.TAXCLASS4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXCLASS5Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.TAXCLASS5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXCLASS5Null()
            Me(Me.tableAP0015.TAXCLASS5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXRPTSWNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.TAXRPTSWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXRPTSWNull()
            Me(Me.tableAP0015.TAXRPTSWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXNBRNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.TAXNBRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXNBRNull()
            Me(Me.tableAP0015.TAXNBRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXIDTYPENull() As Boolean
            Return Me.IsNull(Me.tableAP0015.TAXIDTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXIDTYPENull()
            Me(Me.tableAP0015.TAXIDTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLASIDNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.CLASIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLASIDNull()
            Me(Me.tableAP0015.CLASIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTCRLIMTNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTCRLIMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTCRLIMTNull()
            Me(Me.tableAP0015.AMTCRLIMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTBALDUETNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTBALDUETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTBALDUETNull()
            Me(Me.tableAP0015.AMTBALDUETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTBALDUEHNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTBALDUEHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTBALDUEHNull()
            Me(Me.tableAP0015.AMTBALDUEHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTPPDINVTNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTPPDINVTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTPPDINVTNull()
            Me(Me.tableAP0015.AMTPPDINVTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTPPDINVHNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTPPDINVHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTPPDINVHNull()
            Me(Me.tableAP0015.AMTPPDINVHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDTLASTRVALNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DTLASTRVALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDTLASTRVALNull()
            Me(Me.tableAP0015.DTLASTRVALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTBALLARVNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTBALLARVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTBALLARVNull()
            Me(Me.tableAP0015.AMTBALLARVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCNTOPENINVNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.CNTOPENINVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCNTOPENINVNull()
            Me(Me.tableAP0015.CNTOPENINVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCNTPPDINVCNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.CNTPPDINVCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCNTPPDINVCNull()
            Me(Me.tableAP0015.CNTPPDINVCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCNTINVPAIDNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.CNTINVPAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCNTINVPAIDNull()
            Me(Me.tableAP0015.CNTINVPAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDAYSTOPAYNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DAYSTOPAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDAYSTOPAYNull()
            Me(Me.tableAP0015.DAYSTOPAYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATEINVCHINull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DATEINVCHIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATEINVCHINull()
            Me(Me.tableAP0015.DATEINVCHIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATEBALHINull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DATEBALHIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATEBALHINull()
            Me(Me.tableAP0015.DATEBALHIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATEINVHILNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DATEINVHILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATEINVHILNull()
            Me(Me.tableAP0015.DATEINVHILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATEBALHILNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DATEBALHILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATEBALHILNull()
            Me(Me.tableAP0015.DATEBALHILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATELASTACNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DATELASTACColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATELASTACNull()
            Me(Me.tableAP0015.DATELASTACColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATELASTIVNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DATELASTIVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATELASTIVNull()
            Me(Me.tableAP0015.DATELASTIVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATELASTCRNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DATELASTCRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATELASTCRNull()
            Me(Me.tableAP0015.DATELASTCRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATELASTDRNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DATELASTDRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATELASTDRNull()
            Me(Me.tableAP0015.DATELASTDRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATELASTPANull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DATELASTPAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATELASTPANull()
            Me(Me.tableAP0015.DATELASTPAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATELASTDINull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DATELASTDIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATELASTDINull()
            Me(Me.tableAP0015.DATELASTDIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATELSTADJNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DATELSTADJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATELSTADJNull()
            Me(Me.tableAP0015.DATELSTADJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDINVCHINull() As Boolean
            Return Me.IsNull(Me.tableAP0015.IDINVCHIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDINVCHINull()
            Me(Me.tableAP0015.IDINVCHIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDINVCHILYNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.IDINVCHILYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDINVCHILYNull()
            Me(Me.tableAP0015.IDINVCHILYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTINVHITNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTINVHITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTINVHITNull()
            Me(Me.tableAP0015.AMTINVHITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTBALHITNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTBALHITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTBALHITNull()
            Me(Me.tableAP0015.AMTBALHITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTINVHILTNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTINVHILTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTINVHILTNull()
            Me(Me.tableAP0015.AMTINVHILTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTBALHILTNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTBALHILTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTBALHILTNull()
            Me(Me.tableAP0015.AMTBALHILTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTLASTIVTNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTLASTIVTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTLASTIVTNull()
            Me(Me.tableAP0015.AMTLASTIVTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTLASTCRTNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTLASTCRTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTLASTCRTNull()
            Me(Me.tableAP0015.AMTLASTCRTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTLASTDRTNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTLASTDRTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTLASTDRTNull()
            Me(Me.tableAP0015.AMTLASTDRTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTLASTPYTNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTLASTPYTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTLASTPYTNull()
            Me(Me.tableAP0015.AMTLASTPYTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTLASTDITNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTLASTDITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTLASTDITNull()
            Me(Me.tableAP0015.AMTLASTDITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTLASTADTNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTLASTADTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTLASTADTNull()
            Me(Me.tableAP0015.AMTLASTADTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTINVHIHNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTINVHIHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTINVHIHNull()
            Me(Me.tableAP0015.AMTINVHIHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTBALHIHNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTBALHIHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTBALHIHNull()
            Me(Me.tableAP0015.AMTBALHIHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTINVHILHNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTINVHILHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTINVHILHNull()
            Me(Me.tableAP0015.AMTINVHILHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTBALHILHNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTBALHILHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTBALHILHNull()
            Me(Me.tableAP0015.AMTBALHILHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTLASTIVHNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTLASTIVHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTLASTIVHNull()
            Me(Me.tableAP0015.AMTLASTIVHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTLASTCRHNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTLASTCRHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTLASTCRHNull()
            Me(Me.tableAP0015.AMTLASTCRHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTLASTDRHNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTLASTDRHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTLASTDRHNull()
            Me(Me.tableAP0015.AMTLASTDRHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTLASTPYHNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTLASTPYHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTLASTPYHNull()
            Me(Me.tableAP0015.AMTLASTPYHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTLASTDIHNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTLASTDIHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTLASTDIHNull()
            Me(Me.tableAP0015.AMTLASTDIHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTLASTADHNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTLASTADHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTLASTADHNull()
            Me(Me.tableAP0015.AMTLASTADHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAYMCODENull() As Boolean
            Return Me.IsNull(Me.tableAP0015.PAYMCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAYMCODENull()
            Me(Me.tableAP0015.PAYMCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDTAXREGI1Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.IDTAXREGI1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDTAXREGI1Null()
            Me(Me.tableAP0015.IDTAXREGI1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDTAXREGI2Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.IDTAXREGI2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDTAXREGI2Null()
            Me(Me.tableAP0015.IDTAXREGI2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDTAXREGI3Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.IDTAXREGI3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDTAXREGI3Null()
            Me(Me.tableAP0015.IDTAXREGI3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDTAXREGI4Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.IDTAXREGI4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDTAXREGI4Null()
            Me(Me.tableAP0015.IDTAXREGI4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDTAXREGI5Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.IDTAXREGI5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDTAXREGI5Null()
            Me(Me.tableAP0015.IDTAXREGI5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSWDISTBYNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.SWDISTBYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSWDISTBYNull()
            Me(Me.tableAP0015.SWDISTBYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODECHECKNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.CODECHECKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODECHECKNull()
            Me(Me.tableAP0015.CODECHECKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAVGDAYSPAYNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AVGDAYSPAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAVGDAYSPAYNull()
            Me(Me.tableAP0015.AVGDAYSPAYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTINVPDHCNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTINVPDHCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTINVPDHCNull()
            Me(Me.tableAP0015.AMTINVPDHCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMTINVPDTCNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AMTINVPDTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMTINVPDTCNull()
            Me(Me.tableAP0015.AMTINVPDTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCNTNBRCHKSNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.CNTNBRCHKSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCNTNBRCHKSNull()
            Me(Me.tableAP0015.CNTNBRCHKSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSWTXINC1Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.SWTXINC1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSWTXINC1Null()
            Me(Me.tableAP0015.SWTXINC1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSWTXINC2Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.SWTXINC2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSWTXINC2Null()
            Me(Me.tableAP0015.SWTXINC2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSWTXINC3Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.SWTXINC3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSWTXINC3Null()
            Me(Me.tableAP0015.SWTXINC3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSWTXINC4Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.SWTXINC4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSWTXINC4Null()
            Me(Me.tableAP0015.SWTXINC4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSWTXINC5Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.SWTXINC5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSWTXINC5Null()
            Me(Me.tableAP0015.SWTXINC5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMAIL1Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.EMAIL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMAIL1Null()
            Me(Me.tableAP0015.EMAIL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMAIL2Null() As Boolean
            Return Me.IsNull(Me.tableAP0015.EMAIL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMAIL2Null()
            Me(Me.tableAP0015.EMAIL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWEBSITENull() As Boolean
            Return Me.IsNull(Me.tableAP0015.WEBSITEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWEBSITENull()
            Me(Me.tableAP0015.WEBSITEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTACPHONENull() As Boolean
            Return Me.IsNull(Me.tableAP0015.CTACPHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTACPHONENull()
            Me(Me.tableAP0015.CTACPHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTACFAXNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.CTACFAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTACFAXNull()
            Me(Me.tableAP0015.CTACFAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDELMETHODNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.DELMETHODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDELMETHODNull()
            Me(Me.tableAP0015.DELMETHODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRTGPERCENTNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.RTGPERCENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRTGPERCENTNull()
            Me(Me.tableAP0015.RTGPERCENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRTGDAYSNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.RTGDAYSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRTGDAYSNull()
            Me(Me.tableAP0015.RTGDAYSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRTGTERMSNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.RTGTERMSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRTGTERMSNull()
            Me(Me.tableAP0015.RTGTERMSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRTGAMTTCNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.RTGAMTTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRTGAMTTCNull()
            Me(Me.tableAP0015.RTGAMTTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRTGAMTHCNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.RTGAMTHCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRTGAMTHCNull()
            Me(Me.tableAP0015.RTGAMTHCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALUESNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.VALUESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALUESNull()
            Me(Me.tableAP0015.VALUESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROCESSCMDNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.PROCESSCMDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROCESSCMDNull()
            Me(Me.tableAP0015.PROCESSCMDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEXTCUIDNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.NEXTCUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEXTCUIDNull()
            Me(Me.tableAP0015.NEXTCUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLEGALNAMENull() As Boolean
            Return Me.IsNull(Me.tableAP0015.LEGALNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLEGALNAMENull()
            Me(Me.tableAP0015.LEGALNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHK1099AMTNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.CHK1099AMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHK1099AMTNull()
            Me(Me.tableAP0015.CHK1099AMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAP0015_List_IdNull() As Boolean
            Return Me.IsNull(Me.tableAP0015.AP0015_List_IdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAP0015_List_IdNull()
            Me(Me.tableAP0015.AP0015_List_IdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TermsMatchingRow
        Inherits Global.System.Data.DataRow
        
        Private tableTermsMatching As TermsMatchingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTermsMatching = CType(Me.Table,TermsMatchingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TERMSCODE() As String
            Get
                If Me.IsTERMSCODENull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableTermsMatching.TERMSCODEColumn),String)
                End If
            End Get
            Set
                Me(Me.tableTermsMatching.TERMSCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Terms() As String
            Get
                Return CType(Me(Me.tableTermsMatching.TermsColumn),String)
            End Get
            Set
                Me(Me.tableTermsMatching.TermsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTERMSCODENull() As Boolean
            Return Me.IsNull(Me.tableTermsMatching.TERMSCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTERMSCODENull()
            Me(Me.tableTermsMatching.TERMSCODEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class APTransExport1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As APTransExport1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As APTransExport1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As APTransExport1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class APTransExport2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As APTransExport2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As APTransExport2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As APTransExport2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GlTransExportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GlTransExportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GlTransExportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GlTransExportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Journal_HeadersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Journal_HeadersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Journal_HeadersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Journal_HeadersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Journal_DetailsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Journal_DetailsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Journal_DetailsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Journal_DetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Invoice_HeaderRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Invoice_HeaderRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Invoice_HeaderRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Invoice_HeaderRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Invoice_DetailsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Invoice_DetailsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Invoice_DetailsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Invoice_DetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Invoice_Payment_Schedules_RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Invoice_Payment_Schedules_Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Invoice_Payment_Schedules_Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Invoice_Payment_Schedules_Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class _Account_txtRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As _Account_txtRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As _Account_txtRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As _Account_txtRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class _Supplier_txtRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As _Supplier_txtRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As _Supplier_txtRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As _Supplier_txtRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AP0015RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AP0015Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AP0015Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AP0015Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TermsMatchingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TermsMatchingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TermsMatchingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TermsMatchingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
